# make.tmpl.  Generated from make.tmpl.in by configure.
#
# Copyright (C) 2001-2004 Sistina Software, Inc. All rights reserved.
# Copyright (C) 2004-2009 Red Hat, Inc. All rights reserved.
#
# This file is part of LVM2.
#
# This copyrighted material is made available to anyone wishing to use,
# modify, copy, or redistribute it subject to the terms and conditions
# of the GNU General Public License v.2.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software Foundation,
# Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

SHELL = /bin/sh



CC = arm-openwrt-linux-uclibcgnueabi-gcc
RANLIB = arm-openwrt-linux-uclibcgnueabi-ranlib
SHELL = /bin/sh
INSTALL = /usr/bin/install -c
MKDIR_P = /bin/mkdir -p
MSGFMT = 
LCOV = 
GENHTML = 
LN_S = ln -s
SED = /home/igarashi/cortina/staging_dir/host/bin/sed
CFLOW_CMD = 
AWK = gawk

LIBS = 
# Extra libraries always linked with static binaries
STATIC_LIBS = $(SELINUX_LIBS) $(UDEV_LIBS)
DEFS += -DHAVE_CONFIG_H
CFLAGS += -O -pipe -march=armv7-a -mtune=cortex-a9 -funit-at-a-time -mfpu=neon -ftree-vectorize -mfloat-abi=softfp -fhonour-copts 
CLDFLAGS +=  -Wl,--version-script,.export.sym
LDDEPS +=  .export.sym
LDFLAGS += -L/home/igarashi/cortina/staging_dir/target-arm_uClibc-0.9.32_eabi/usr/lib -L/home/igarashi/cortina/staging_dir/target-arm_uClibc-0.9.32_eabi/lib -L/home/igarashi/cortina/staging_dir/toolchain-arm_gcc-4.5.1+l_uClibc-0.9.32_eabi/usr/lib -L/home/igarashi/cortina/staging_dir/toolchain-arm_gcc-4.5.1+l_uClibc-0.9.32_eabi/lib  -Wl,--export-dynamic
LIB_SUFFIX = so
LVMINTERNAL_LIBS = -llvm-internal $(DL_LIBS)
DL_LIBS = -ldl
PTHREAD_LIBS = 
READLINE_LIBS = -lreadline -lncurses
SELINUX_LIBS = 
UDEV_LIBS = 

# Setup directory variables
prefix = /usr
exec_prefix = /usr
udev_prefix = ${exec_prefix}
bindir = $(DESTDIR)/usr/bin
confdir = $(DESTDIR)/etc/lvm
includedir = $(DESTDIR)${prefix}/include
libdir = $(DESTDIR)${exec_prefix}/lib
usrlibdir = $(DESTDIR)${prefix}/lib
sbindir = $(DESTDIR)/usr/sbin
usrsbindir = $(DESTDIR)${prefix}/sbin
datarootdir = $(DESTDIR)${prefix}/share
infodir = $(datarootdir)/info
mandir = $(datarootdir)/man
localedir = $(DESTDIR)
staticdir = $(DESTDIR)${exec_prefix}/sbin
udevdir = $(DESTDIR)${udev_prefix}/lib/udev/rules.d
USRLIB_RELPATH = $(shell echo $(abspath $(usrlibdir) $(libdir)) | \
  $(AWK) -f $(top_srcdir)/scripts/relpath.awk)

# Setup vpath search paths for some suffixes
vpath %.c $(srcdir)
vpath %.in $(srcdir)
vpath %.po $(srcdir)
vpath %.exported_symbols $(srcdir)

interface = ioctl
interfacebuilddir = $(top_builddir)/libdm/$(interface)

# The number of jobs to run, if blank, defaults to the make standard
ifndef MAKEFLAGS
MAKEFLAGS = 
endif

# Handle installation of files
ifeq ("no", "yes")
# leaving defaults
M_INSTALL_PROGRAM =
M_INSTALL_DATA = -m 644
else
M_INSTALL_PROGRAM = -m 555
M_INSTALL_DATA = -m 444
endif
INSTALL_PROGRAM = $(INSTALL) $(M_INSTALL_PROGRAM) $(STRIP)
INSTALL_DATA = $(INSTALL) -p $(M_INSTALL_DATA)
INSTALL_WDATA = $(INSTALL) -p -m 644

.SUFFIXES: .c .d .o .so .a .po .pot .mo .dylib

CFLAGS += -fPIC -Wall -Wundef -Wshadow -Wcast-align -Wwrite-strings -Wmissing-prototypes -Wmissing-declarations -Wnested-externs -Winline -Wmissing-noreturn -Wformat-security

#CFLAGS += -W -Wconversion -Wpointer-arith -Wredundant-decls -Wbad-function-cast -Wcast-qual
#CFLAGS += -pedantic -std=gnu99

CFLAGS += -O2

ifeq ("no", "yes")
  CFLAGS += -g -fno-omit-frame-pointer
  DEFS += -DDEBUG
  # memory debugging is not thread-safe yet
  ifneq ("", "yes")
    DEFS += -DDEBUG_MEM
  endif
endif

ifeq ("no", "yes")
  DEFS += -DINTL_PACKAGE=\"\" -DLOCALEDIR=\"\"
endif

LDFLAGS += -L$(top_builddir)/libdm -L$(top_builddir)/lib

ifeq ("", "yes")
  LDFLAGS += -L$(top_builddir)/daemons/dmeventd
endif

ifeq ("no", "yes")
  DEFS += -DDM_COMPAT
endif

ifeq ("yes", "yes")
  DEFS += -DDM_IOCTLS
endif

#DEFS += -DDEBUG_POOL
#DEFS += -DBOUNDS_CHECK

#CFLAGS += -pg
#LDFLAGS += -pg

STRIP=
#STRIP = -s

LVM_VERSION := $(shell cat $(top_srcdir)/VERSION)

LIB_VERSION_LVM := $(shell cat $(top_srcdir)/VERSION | \
		     $(AWK) -F '.' '{printf "%s.%s",$$1,$$2}')

LIB_VERSION_DM := $(shell cat $(top_srcdir)/VERSION_DM | \
		    $(AWK) -F '.' '{printf "%s.%s",$$1,$$2}')

LIB_VERSION_APP := $(shell cat $(top_srcdir)/VERSION | \
		     $(AWK) -F '[(). ]' '{printf "%s.%s",$$1,$$4}')

INCLUDES += -I. -I$(top_builddir)/include

INC_LNS = $(top_builddir)/include/.symlinks_created

DEPS = $(top_builddir)/make.tmpl $(top_srcdir)/VERSION \
       $(top_builddir)/Makefile $(INC_LNS)

OBJECTS = $(SOURCES:%.c=%.o)
POTFILES = $(SOURCES:%.c=%.pot)

.PHONY: all pofile distclean clean cleandir cflow device-mapper
.PHONY: install install_cluster install_device-mapper install_lvm2
.PHONY: install_lib_shared install_lib_shared_plugin
.PHONY: $(SUBDIRS) $(SUBDIRS.install) $(SUBDIRS.clean) $(SUBDIRS.distclean)
.PHONY: $(SUBDIRS.pofile) $(SUBDIRS.install_cluster) $(SUBDIRS.cflow)
.PHONY: $(SUBDIRS.device-mapper) $(SUBDIRS.install-device-mapper)

SUBDIRS.device-mapper := $(SUBDIRS:=.device-mapper)
SUBDIRS.install := $(SUBDIRS:=.install)
SUBDIRS.install_cluster := $(SUBDIRS:=.install_cluster)
SUBDIRS.install_device-mapper := $(SUBDIRS:=.install_device-mapper)
SUBDIRS.install_lvm2 := $(SUBDIRS:=.install_lvm2)
SUBDIRS.pofile := $(SUBDIRS:=.pofile)
SUBDIRS.cflow := $(SUBDIRS:=.cflow)
SUBDIRS.clean := $(SUBDIRS:=.clean)
SUBDIRS.distclean := $(SUBDIRS:=.distclean)

TARGETS += $(LIB_SHARED) $(LIB_STATIC)

all: $(SUBDIRS) $(TARGETS)

install: all $(SUBDIRS.install)
install_cluster: all $(SUBDIRS.install_cluster)
install_device-mapper: $(SUBDIRS.install_device-mapper)
install_lvm2: $(SUBDIRS.install_lvm2)
cflow: $(SUBDIRS.cflow)

$(SUBDIRS): $(SUBDIRS.device-mapper)
	$(MAKE) -C $@

$(SUBDIRS.device-mapper):
	$(MAKE) -C $(@:.device-mapper=) device-mapper

$(SUBDIRS.install): $(SUBDIRS)
	$(MAKE) -C $(@:.install=) install

$(SUBDIRS.install_cluster): $(SUBDIRS)
	$(MAKE) -C $(@:.install_cluster=) install_cluster

$(SUBDIRS.install_device-mapper): device-mapper
	$(MAKE) -C $(@:.install_device-mapper=) install_device-mapper

$(SUBDIRS.install_lvm2): $(SUBDIRS)
	$(MAKE) -C $(@:.install_lvm2=) install_lvm2

$(SUBDIRS.clean):
	-$(MAKE) -C $(@:.clean=) clean

$(SUBDIRS.distclean):
	-$(MAKE) -C $(@:.distclean=) distclean

$(SUBDIRS.cflow):
	$(MAKE) -C $(@:.cflow=) cflow

ifeq ("no", "yes")
pofile: $(SUBDIRS.pofile) $(POTFILES)

$(SUBDIRS.pofile):
	$(MAKE) -C $(@:.pofile=) pofile
endif

ifneq ("$(CFLOW_LIST_TARGET)", "")
CLEAN_CFLOW += $(CFLOW_LIST_TARGET)
$(CFLOW_LIST_TARGET): $(CFLOW_LIST)
	echo "CFLOW_SOURCES += $(addprefix \
		\$$(top_srcdir)$(subst $(top_srcdir),,$(srcdir))/, $(CFLOW_LIST))" > $@
cflow: $(CFLOW_LIST_TARGET)
endif

ifneq ("$(CFLOW_TARGET)", "")
CLEAN_CFLOW += \
	$(CFLOW_TARGET).cflow \
	$(CFLOW_TARGET).xref \
	$(CFLOW_TARGET).tree \
	$(CFLOW_TARGET).rtree \
	$(CFLOW_TARGET).rxref

ifneq ("$(CFLOW_CMD)", "")
CFLOW_FLAGS +=\
 --cpp="$(CC) -E" \
 --symbol _ISbit:wrapper \
 --symbol __attribute__:wrapper \
 --symbol __const__:wrapper \
 --symbol __const:type \
 --symbol __restrict:type \
 --symbol __extension__:wrapper \
 --symbol __nonnull:wrapper \
 --symbol __nothrow__:wrapper \
 --symbol __pure__:wrapper \
 --symbol __REDIRECT:wrapper \
 --symbol __REDIRECT_NTH:wrapper \
 --symbol __wur:wrapper \
 -I$(top_srcdir)/libdm \
 -I$(top_srcdir)/libdm/ioctl \
 -I$(top_srcdir)/daemons/dmeventd/plugins/lvm2/ \
 $(INCLUDES) $(DEFS)

$(CFLOW_TARGET).cflow: $(CFLOW_SOURCES)
	$(CFLOW_CMD) -o$@ $(CFLOW_FLAGS) $(CFLOW_SOURCES)
$(CFLOW_TARGET).rxref: $(CFLOW_SOURCES)
	$(CFLOW_CMD) -o$@ $(CFLOW_FLAGS) -r --omit-arguments $(CFLOW_SOURCES)
$(CFLOW_TARGET).tree: $(CFLOW_SOURCES)
	$(CFLOW_CMD) -o$@ $(CFLOW_FLAGS) --omit-arguments -T -b $(CFLOW_SOURCES)
$(CFLOW_TARGET).xref: $(CFLOW_SOURCES)
	$(CFLOW_CMD) -o$@ $(CFLOW_FLAGS) --omit-arguments -x $(CFLOW_SOURCES)
#$(CFLOW_TARGET).rtree:  $(CFLOW_SOURCES)
#	$(CFLOW_CMD) -o$@ $(CFLOW_FLAGS) -r --omit-arguments -T -b $(CFLOW_SOURCES)
cflow: $(CFLOW_TARGET).cflow $(CFLOW_TARGET).tree $(CFLOW_TARGET).rxref $(CFLOW_TARGET).xref
#$(CFLOW_TARGET).rtree
endif
endif

$(TARGETS): $(OBJECTS)

%.o: %.c
	$(CC) -c $(INCLUDES) $(DEFS) $(CFLAGS) $< -o $@

%.pot: %.c Makefile
	$(CC) -E $(INCLUDES) -include $(top_srcdir)/include/pogen.h \
		$(DEFS) $(CFLAGS) $< > $@

%.so: %.o
	$(CC) -c $(INCLUDES) $(DEFS) $(CFLAGS) $(CLDFLAGS) $< $(LIBS) -o $@

ifneq (,$(LIB_SHARED))

TARGETS += $(LIB_SHARED).$(LIB_VERSION)
$(LIB_SHARED).$(LIB_VERSION): $(OBJECTS) $(LDDEPS)
ifeq ("so","so")
	$(CC) -shared -Wl,-soname,$(notdir $@) \
		$(CFLAGS) $(CLDFLAGS) $(LDFLAGS) $(OBJECTS) $(LIBS) -o $@
endif
ifeq ("so","dylib")
	$(CC) -dynamiclib -dylib_current_version,$(LIB_VERSION) \
		$(CFLAGS) $(CLDFLAGS) $(LDFLAGS) $(OBJECTS) $(LIBS) -o $@
endif

$(LIB_SHARED): $(LIB_SHARED).$(LIB_VERSION)
	$(LN_S) -f $(<F) $@

install_lib_shared: $(LIB_SHARED)
	$(INSTALL_PROGRAM) -D $< $(libdir)/$(<F).$(LIB_VERSION)
	$(INSTALL) -d $(usrlibdir)
	$(LN_S) -f $(USRLIB_RELPATH)$(<F).$(LIB_VERSION) $(usrlibdir)/$(<F)

# FIXME: plugins are currently installed with .so suffix only
install_lib_shared_plugin: $(LIB_SHARED)
	$(INSTALL_PROGRAM) -D $< $(libdir)/$(<F)
endif

%.so: %.a
	$(CC) -shared -Wl,-soname,$(notdir $@).$(LIB_VERSION) \
	$(CFLAGS) $(CLDFLAGS) $(LDFLAGS) $(LIBS) -o $@ \
	-Wl,-whole-archive $< -Wl,-no-whole-archive

$(LIB_STATIC): $(OBJECTS)
	$(RM) $@
	$(AR) rs $@ $(OBJECTS)

%.d: %.c
	$(MKDIR_P) $(dir $@); \
	set -e; \
	FILE=`echo $@ | sed 's/\\//\\\\\\//g;s/\\.d//g'`; \
	DEPS=`echo $(DEPS) | sed -e 's/\\//\\\\\\//g'`; \
	$(CC) -MM $(INCLUDES) $(DEFS) $(CFLAGS) -o $@ $<; \
	sed -i "s/\(.*\)\.o[ :]*/$$FILE.o $$FILE.d $$FILE.pot: $$DEPS /g" $@; \
	[ -s $@ ] || $(RM) $@

%.mo: %.po
	$(MSGFMT) -o $@ $<

cleandir:
	$(RM) $(OBJECTS) $(TARGETS) $(CLEAN_TARGETS) $(CLEAN_CFLOW) $(LDDEPS) \
	  $(POTFILES) $(SOURCES:%.c=%.d) $(SOURCES:%.c=%.gcno) $(SOURCES:%.c=%.gcda) \
	  $(SOURCES2:%.c=%.o) $(SOURCES2:%.c=%.d) $(SOURCES2:%.c=%.gcno) $(SOURCES2:%.c=%.gcda)

clean: $(SUBDIRS.clean) cleandir

distclean: cleandir $(SUBDIRS.distclean)
	test -z "$(DISTCLEAN_DIRS)" || $(RM) -r $(DISTCLEAN_DIRS)
	$(RM) $(DISTCLEAN_TARGETS) Makefile core

.export.sym: .exported_symbols
	set -e; (echo "Base {"; echo "	global:"; \
		 sed "s/^/		/;s/$$/;/" < $<; \
		 echo "	local:"; echo "		*;"; echo "};") > $@

ifeq (,$(findstring $(MAKECMDGOALS),cscope.out cflow clean distclean))
    ifdef SOURCES
       -include $(SOURCES:.c=.d)
    endif
    ifdef SOURCES2
       -include $(SOURCES2:.c=.d)
    endif
endif
