<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry>
<refentryinfo>
  <author><firstname>Paul</firstname><surname>Wouters</surname><authorblurb><para>documenter</para> </authorblurb></author>
</refentryinfo>
<refmeta>
<refentrytitle>IPSEC.CONF</refentrytitle>
<manvolnum>5</manvolnum>
<refmiscinfo class='date'>12 Dec 2012</refmiscinfo>
<refmiscinfo class="source">libreswan</refmiscinfo>
<refmiscinfo class="manual">Executable programs</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>ipsec.conf</refname>
<refpurpose>IPsec configuration and connections</refpurpose>
</refnamediv>
<!-- body begins here -->

<refsect1 id='description'><title>DESCRIPTION</title>
<para>The optional
<emphasis remap='I'>ipsec.conf</emphasis>
file
specifies most configuration and control information for the
Libreswan IPsec subsystem.
(The major exception is secrets for authentication;
see
<citerefentry><refentrytitle>ipsec.secrets</refentrytitle><manvolnum>5</manvolnum></citerefentry>.)
Its contents are not security-sensitive.
</para>

<para>The file is a text file, consisting of one or more
<emphasis remap='I'>sections</emphasis>.
White space followed by
<emphasis remap='B'>#</emphasis>
followed by anything to the end of the line
is a comment and is ignored,
as are empty lines which are not within a section.</para>

<para>A line which contains
<emphasis remap='B'>include</emphasis>
and a file name, separated by white space,
is replaced by the contents of that file,
preceded and followed by empty lines.
If the file name is not a full pathname,
it is considered to be relative to the directory containing the
including file.
Such inclusions can be nested.
Only a single filename may be supplied, and it may not contain white space,
but it may include shell wildcards (see
<citerefentry><refentrytitle>sh</refentrytitle><manvolnum>1</manvolnum></citerefentry>);
for example:</para>

<para><emphasis remap='B'>include </emphasis> <emphasis remap='B'>/etc/ipsec.d/*.conf</emphasis></para>

<para>The intention of the include facility is mostly to permit keeping
information on connections, or sets of connections,
separate from the main configuration file.
This permits such connection descriptions to be changed,
copied to the other security gateways involved, etc.,
without having to constantly extract them from the configuration
file and then insert them back into it.
Note also the
<emphasis remap='B'>also</emphasis>
and
<emphasis remap='B'>alsoflip</emphasis>
parameters (described below) which permit splitting a single logical section
(e.g. a connection description) into several actual sections.</para>

<para>The first significant line of the file may specify a version
of this specification for backwards compatibility with freeswan and openswan. It
is ignored and unused. For compatibility with openswan, specify:</para>

<para><emphasis remap='B'>version 2</emphasis></para>

<para>A section
begins with a line of the form:</para>

<para><emphasis remap='I'>type</emphasis> <emphasis remap='I'>name</emphasis></para>

<para>where
<emphasis remap='I'>type</emphasis>
indicates what type of section follows, and
<emphasis remap='I'>name</emphasis>
is an arbitrary name which distinguishes the section from others
of the same type.
(Names must start with a letter and may contain only
letters, digits, periods, underscores, and hyphens.)
All subsequent non-empty lines
which begin with white space are part of the section;
comments within a section must begin with white space too.
There may be only one section of a given type with a given name.</para>

<para>Lines within the section are generally of the form</para>

<para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis remap='I'>parameter</emphasis><emphasis remap='B'>=</emphasis><emphasis remap='I'>value</emphasis></para>

<para>(note the mandatory preceding white space).
There can be white space on either side of the
<emphasis remap='B'>=</emphasis>.
Parameter names follow the same syntax as section names,
and are specific to a section type.
Unless otherwise explicitly specified,
no parameter name may appear more than once in a section.</para>

<para>An empty
<emphasis remap='I'>value</emphasis>
stands for the system default value (if any) of the parameter,
i.e. it is roughly equivalent to omitting the parameter line entirely.
A
<emphasis remap='I'>value</emphasis>
may contain white space only if the entire
<emphasis remap='I'>value</emphasis>
is enclosed in double quotes (<emphasis remap='B'>"</emphasis>);
a
<emphasis remap='I'>value</emphasis>
cannot itself contain a double quote,
nor may it be continued across more than one line.</para>

<para>Numeric values are specified to be either an &ldquo;integer&rdquo;
(a sequence of digits) or a &ldquo;decimal number&rdquo;
(sequence of digits optionally followed by `.' and another sequence of digits).</para>

<para>There is currently one parameter which is available in any type of
section:</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='B'>also</emphasis></term>
  <listitem>
<para>the value is a section name;
the parameters of that section are appended to this section,
as if they had been written as part of it.
The specified section must exist, must follow the current one,
and must have the same section type.
(Nesting is permitted,
and there may be more than one
<emphasis remap='B'>also</emphasis>
in a single section,
although it is forbidden to append the same section more than once.)
This allows, for example, keeping the encryption keys
for a connection in a separate file
from the rest of the description, by using both an
<emphasis remap='B'>also</emphasis>
parameter and an
<emphasis remap='B'>include</emphasis>
line.
(Caution, see BUGS below for some restrictions.)</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>alsoflip</emphasis></term>
  <listitem>
<para>can be used in a
<emphasis remap='B'>conn</emphasis>
section.
It acts like an
<emphasis remap='B'>also</emphasis>
that flips the referenced section's entries left-for-right.</para>
  </listitem>
  </varlistentry>
</variablelist>

<para>Parameter names beginning with
<emphasis remap='B'>x-</emphasis>
(or
<emphasis remap='B'>X-</emphasis>,
or
<emphasis remap='B'>x_</emphasis>,
or
<emphasis remap='B'>X_</emphasis>)
are reserved for user extensions and will never be assigned meanings
by IPsec.
Parameters with such names must still observe the syntax rules
(limits on characters used in the name;
no white space in a non-quoted value;
no newlines or double quotes within the value).
All other as-yet-unused parameter names are reserved for future IPsec
improvements.</para>

<para>A section with name
<emphasis remap='B'>%default</emphasis>
specifies defaults for sections of the same type.
For each parameter in it,
any section of that type which does not have a parameter of the same name
gets a copy of the one from the
<emphasis remap='B'>%default</emphasis>
section.
There may be multiple
<emphasis remap='B'>%default</emphasis>
sections of a given type,
but only one default may be supplied for any specific parameter name,
and all
<emphasis remap='B'>%default</emphasis>
sections of a given type must precede all non-<emphasis remap='B'>%default</emphasis>
sections of that type.
<emphasis remap='B'>%default</emphasis>
sections may not contain
<emphasis remap='B'>also</emphasis>
or
<emphasis remap='B'>alsoflip</emphasis>
parameters.</para>

<para>Currently there are two types of section:
a
<emphasis remap='B'>config</emphasis>
section specifies general configuration information for IPsec,
while a
<emphasis remap='B'>conn</emphasis>
section specifies an IPsec connection.</para>
</refsect1>

<refsect1 id='conn_sections'><title>CONN SECTIONS</title>
<para>A
<emphasis remap='B'>conn</emphasis>
section contains a
<emphasis remap='I'>connection specification</emphasis>,
defining a network connection to be made using IPsec.
The name given is arbitrary, and is used to identify the connection to
<citerefentry><refentrytitle>ipsec_auto</refentrytitle><manvolnum>8</manvolnum></citerefentry>
Here's a simple example:</para>

<!-- .ne 10 -->
<literallayout remap='.nf'>
<!-- .ta 1c -->
<emphasis remap='B'>
conn snt
	left=10.11.11.1
	leftsubnet=10.0.1.0/24
	leftnexthop=172.16.55.66
	leftsourceip=10.0.1.1
	right=192.168.22.1
	rightsubnet=10.0.2.0/24
	rightnexthop=172.16.88.99
	rightsourceip=10.0.2.1
	keyingtries=%forever
</emphasis>
</literallayout> <!-- .fi -->

<para>A note on terminology...
In automatic keying, there are two kinds of communications going on:
transmission of user IP packets, and gateway-to-gateway negotiations for
keying, rekeying, and general control.
The data path (a set of &ldquo;IPsec SAs&rdquo;) used for user packets is herein
referred to as the &ldquo;connection&rdquo;;
the path used for negotiations (built with &ldquo;ISAKMP SAs&rdquo;) is referred to as
the &ldquo;keying channel&rdquo;.</para>

<para>To avoid trivial editing of the configuration file to suit it to each system
involved in a connection,
connection specifications are written in terms of
<emphasis remap='I'>left</emphasis>
and
<emphasis remap='I'>right</emphasis>
participants,
rather than in terms of local and remote.
Which participant is considered
<emphasis remap='I'>left</emphasis>
or
<emphasis remap='I'>right</emphasis>
is arbitrary;
IPsec figures out which one it is being run on based on internal information.
This permits using identical connection specifications on both ends.
There are cases where there is no symmetry; a good convention is to
use
<emphasis remap='I'>left</emphasis>
for the local side and
<emphasis remap='I'>right</emphasis>
for the remote side (the first letters are a good mnemonic).</para>

<para>Many of the parameters relate to one participant or the other;
only the ones for
<emphasis remap='I'>left</emphasis>
are listed here, but every parameter whose name begins with
<emphasis remap='B'>left</emphasis>
has a
<emphasis remap='B'>right</emphasis>
counterpart,
whose description is the same but with
<emphasis remap='B'>left</emphasis>
and
<emphasis remap='B'>right</emphasis>
reversed.</para>

<para>Parameters are optional unless marked &ldquo;(required)&rdquo;
</para>

<refsect2 id='conn_parameters__general'><title>CONN PARAMETERS:  GENERAL</title>
<para>The following parameters are relevant to IKE automatic keying.
Unless otherwise noted, for a connection to work, in general it is necessary for the two ends to agree exactly
on the values of these parameters.</para>
<variablelist remap='TP'>
  <varlistentry>
  <term><emphasis remap='B'>connaddrfamily</emphasis></term>
  <listitem>
<para>the connection address family of the connection; currently the accepted
values are <emphasis remap='B'>ipv4</emphasis> (the default); or
<emphasis remap='B'>ipv6</emphasis>. This option is confusing, especially when
doing IPv4-in-IPv6 or IPv6-in-IPv4 tunnels. The developers hope to remove this
option in the near future for proper auto-detection. For now, set connaddrfamily=
to the family of the *subnet= options, and if those are not defined, to the family
of the left=/right= options.
</para>
<para>IPv6 is supported with NETKEY and with KLIPS in all Libreswan versions</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>type</emphasis></term>
  <listitem>
<para>the type of the connection; currently the accepted values
are
<emphasis remap='B'>tunnel</emphasis>
(the default)
signifying a host-to-host, host-to-subnet, or subnet-to-subnet tunnel;
<emphasis remap='B'>transport</emphasis>,
signifying host-to-host transport mode;
<emphasis remap='B'>passthrough</emphasis>,
signifying that no IPsec processing should be done at all;
<emphasis remap='B'>drop</emphasis>,
signifying that packets should be discarded; and
<emphasis remap='B'>reject</emphasis>,
signifying that packets should be discarded and a diagnostic ICMP returned.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>left</emphasis></term>
  <listitem>
<para>(required)
the IP address of the left participant's public-network interface,
in any form accepted by
<citerefentry><refentrytitle>ipsec_ttoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>. Currently, IPv4 and IPv6 IP addresses are supported.
There are several magic values.  If it is
<emphasis remap='B'>%defaultroute</emphasis>,
and
the
<emphasis remap='B'>config setup</emphasis>
section's,
<emphasis remap='B'>interfaces</emphasis>
specification contains
<emphasis remap='B'>%defaultroute</emphasis>,
<emphasis remap='B'>left</emphasis>
will be filled in automatically with the local address
of the default-route interface (as determined at IPsec startup time);
this also overrides any value supplied for
<emphasis remap='B'>leftnexthop</emphasis>.
(Either
<emphasis remap='B'>left</emphasis>
or
<emphasis remap='B'>right</emphasis>
may be
<emphasis remap='B'>%defaultroute</emphasis>,
but not both.)
The value
<emphasis remap='B'>%any</emphasis>
signifies an address to be filled in (by automatic keying) during
negotiation.
The value
<emphasis remap='B'>%opportunistic</emphasis>
signifies that both
<emphasis remap='B'>left</emphasis>
and
<emphasis remap='B'>leftnexthop</emphasis>
are to be filled in (by automatic keying) from DNS data for
<emphasis remap='B'>left</emphasis>'s
client.
The value can also contain the interface name, which will then later be
used to obtain the IP address from to fill in. For example
<emphasis remap='B'>%ppp0</emphasis>

The values
<emphasis remap='B'>%group</emphasis>
and
<emphasis remap='B'>%opportunisticgroup</emphasis>
makes this a policy group conn: one that will be instantiated
into a regular or opportunistic conn for each CIDR block listed in the
policy group file with the same name as the conn.</para>
<para>If using IP addresses in combination with NAT, always use the
actual local machine's (NATed) IP address, and if the remote (eg right=)
is NATed as well, the remote's public (<emphasis remap='B'>not</emphasis>
NATed) IP address. Note that this makes the configuration no longer
symmetrical on both sides, so you cannot use an identical configuration
file on both hosts.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftsubnet</emphasis></term>
  <listitem>
<para>private subnet behind the left participant, expressed as
<emphasis remap='I'>network</emphasis><emphasis remap='B'>/</emphasis><emphasis remap='I'>netmask</emphasis>
(actually, any form acceptable to
<citerefentry><refentrytitle>ipsec_ttosubnet</refentrytitle><manvolnum>3</manvolnum></citerefentry>); Currently, IPv4 and IPv6 ranges are supported.
if omitted, essentially assumed to be <emphasis remap='I'>left</emphasis><filename>/32</filename>,
signifying that the left end of the connection goes to the left participant only</para>
<para>It supports two magic shorthands <emphasis remap='I'>vhost:</emphasis> and
<emphasis remap='I'>vnet:</emphasis>, which can list subnets in the same syntax as 
<emphasis remap='I'>virtual-private</emphasis>. The value <emphasis remap='I'>%priv</emphasis>
expands to the networks specified in <emphasis remap='I'>virtual-private</emphasis>. The value
<emphasis remap='I'>%no</emphasis> means no subnet. A common use for allowing roadwarriors to
come in on public IPs or via accepted NATed networks from RFC1918 is to use
<emphasis remap='I'>leftsubnet=vhost:%no,%priv</emphasis>. The <emphasis remap='I'>vnet:</emphasis>
option can be used to allow RFC1918 subnets without hardcoding them. When using vnet the
connection will instantiate, allowing for multiple tunnels with different subnets.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftsubnets</emphasis></term>
  <listitem>
<para>specify multiple private subnets behind the left participant, expressed as
{
<emphasis remap='I'>networkA</emphasis><emphasis remap='B'>/</emphasis><emphasis remap='I'>netmaskA</emphasis> 
<emphasis remap='I'>networkB</emphasis><emphasis remap='B'>/</emphasis><emphasis remap='I'>netmaskB</emphasis>
<emphasis remap='I'>[...]</emphasis>
}
If both a leftsubnets= and rightsubnets= are defined, all combinations of
subnet tunnels will be established as IPsec tunnels. You cannot use leftsubnet= and leftsubnets= together. For examples see <emphasis remap='I'>testing/pluto/multinet-*</emphasis>.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftaddresspool</emphasis></term>
  <listitem>
<para> address pool from with the XAUTH server can assign IP addresses to clients.
When configured as an XAUTH server, using 
<emphasis remap='I'>leftxauthserver=yes</emphasis> this option specifies the address pool from
which IP addresses are taken to assign the the XAUTH clients. The syntax of the address pool specifies a
range (not a CIDR), in the following syntax: <emphasis remap='I'>rightaddresspool=192.168.1.100-192.168.1.200</emphasis>.
Generally, the <emphasis remap='I'>rightaddresspool=</emphasis> option will be accompanied by
<emphasis remap='I'>rightxauthclient=yes</emphasis>, <emphasis remap='I'>leftxauthserver=yes</emphasis> and <emphasis remap='I'>leftsubnet=0.0.0.0/0</emphasis> option. 
</para>
<para>When <emphasis remap='I'>leftaddresspool=</emphasis> is specified, the connection may not specify either
<emphasis remap='I'>leftsubnet=</emphasis> or <emphasis remap='I'>leftsubnets=</emphasis>. Address pools are
fully allocated when the connection is loaded, so the ranges should be sane. For example, specifying a range
<emphasis remap='I'>rightaddresspool=10.0.0.0-11.0.0.0</emphasis> will lead to massive memory allocation. Address pools
specifying the exact same range are shared between different connections. Different addresspools should not be defined
to partially overlap.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftprotoport</emphasis></term>
  <listitem>
<para>allowed protocols and ports over connection, also called Port
Selectors. The argument is in the form <emphasis remap='I'>protocol</emphasis>,
which can be a number or a name that will be looked up in
<emphasis remap='I'>/etc/protocols</emphasis>, such as
<emphasis remap='I'>leftprotoport=icmp</emphasis>, or in the form of
<emphasis remap='I'>protocol/port</emphasis>, such as
<emphasis remap='I'>tcp/smtp</emphasis>. Ports can be defined as a number (eg. 25)
or as a name (eg smtp) which will be looked up in
<emphasis remap='I'>/etc/services</emphasis>. A special keyword
<emphasis remap='I'>%any</emphasis> can be used to allow all ports of a certain
protocol. The most common use of this option is for L2TP connections to only
allow l2tp packets (UDP port 1701), eg:
<emphasis remap='I'>leftprotoport=17/1701</emphasis>. Some clients, notably
older Windows XP and some Mac OSX clients, use a random high port as source
port. In those cases <emphasis remap='I'>rightprotoport=17/%any</emphasis> can
be used to allow all UDP traffic on the connection.
Note that this option is part of the proposal, so it cannot be arbitrarily left out
if one end does not care about the traffic selection over this connection - both peers have
to agree. The Port Selectors show up in the output of
<emphasis remap='I'>ipsec eroute</emphasis> and <emphasis remap='I'>ipsec auto --status</emphasis>
eg:<emphasis remap='I'>"l2tp": 193.110.157.131[@aivd.libreswan.org]:7/1701...%any:17/1701</emphasis>
This option only filters outbound traffic.  Inbound traffic selection
must still be based on firewall rules activated by an updown script. The
variables $PLUTO_MY_PROTOCOL, $PLUTO_PEER_PROTOCOL, $PLUTO_MY_PORT, and
$PLUTO_PEER_PORT are available for use in <emphasis remap='I'>updown</emphasis>
scripts. Older workarounds for bugs involved a setting of <emphasis remap='I'>17/0</emphasis>
to denote <emphasis remap='I'>any single UDP port</emphasis> (not UDP port 0). Some clients, most notably OSX, uses a random high port, instead of port 1701 for L2TP.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftnexthop</emphasis></term>
  <listitem>
<para>next-hop gateway IP address for the left participant's connection
to the public network;
defaults to
<emphasis remap='B'>%direct</emphasis>
(meaning
<emphasis remap='I'>right</emphasis>).
If the value is to be overridden by the
<emphasis remap='B'>left=%defaultroute</emphasis>
method (see above),
an explicit value must
<emphasis remap='I'>not</emphasis>
be given.
If that method is not being used,
but
<emphasis remap='B'>leftnexthop</emphasis>
is
<emphasis remap='B'>%defaultroute</emphasis>,
and
<emphasis remap='B'>interfaces=%defaultroute</emphasis>
is used in the
<emphasis remap='B'>config setup</emphasis>
section,
the next-hop gateway address of the default-route interface
will be used.
The magic value
<emphasis remap='B'>%direct</emphasis>
signifies a value to be filled in (by automatic keying)
with the peer's address.
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftsourceip</emphasis></term>
  <listitem>
<para>the IP address for this host to use when transmitting a packet to the
other side of this link.  Relevant only locally, the other end need not agree.
This option is used to make the gateway itself use its internal IP, which is
part of the leftsubnet, to communicate to the rightsubnet or right. Otherwise,
it will use its <emphasis remap='B'>nearest</emphasis> IP address, which is
its public IP address. This option is mostly used when defining subnet-subnet
connections, so that the gateways can talk to each other and the subnet at
the other end, without the need to build additional host-subnet, subnet-host
and host-host tunnels. Both IPv4 and IPv6 addresses are supported.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>leftupdown</emphasis></term>
  <listitem>
<para>what &ldquo;updown&rdquo; script to run to adjust routing and/or
firewalling when the status of the connection changes (default
<emphasis remap='B'>ipsec _updown</emphasis>).
May include positional parameters separated by white space
(although this requires enclosing the whole string in quotes);
including shell metacharacters is unwise. An example to enable
routing when using the NETKEY stack, one can use:</para>
<para>leftupdown="ipsec _updown --route yes"</para>
<para>See
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>
for details.
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftfirewall</emphasis></term>
  <listitem>
<para>This option is obsolete and should not used anymore. </para>
  </listitem>
  </varlistentry>

</variablelist>
<para>If one or both security gateways are doing forwarding firewalling
(possibly including masquerading),
and this is specified using the firewall parameters,
tunnels established with IPsec are exempted from it
so that packets can flow unchanged through the tunnels.
(This means that all subnets connected in this manner must have
distinct, non-overlapping subnet address blocks.)
This is done by the default
<emphasis remap='I'>updown</emphasis>
script (see
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>).</para>

<para>The implementation of this makes certain assumptions about firewall setup,
and the availability of the 
<emphasis remap='I'>Linux Advanced Routing</emphasis> tools.
In situations calling for more control,
it may be preferable for the user to supply his own
<emphasis remap='I'>updown</emphasis>
script,
which makes the appropriate adjustments for his system.</para>
</refsect2>

<refsect2 id='conn_parameters__automatic_keying'><title>CONN PARAMETERS:  AUTOMATIC KEYING</title>
<para>The following parameters are relevant to automatic keying via IKE.
Unless otherwise noted, for a connection to work, in general it is
necessary for the two ends to agree exactly on the values of these
parameters.</para>
<variablelist remap='TP'>

<varlistentry>
<term><emphasis remap='B'>auto</emphasis></term>
  <listitem>
<para>what operation, if any, should be done automatically at IPsec startup;
currently-accepted values are
<emphasis remap='B'>add</emphasis>
(signifying an
<emphasis remap='B'>ipsec auto</emphasis> <option>--add</option>),
<emphasis remap='B'>ondemand</emphasis>
(signifying that plus an
<emphasis remap='B'>ipsec auto</emphasis> <option>--ondemand</option>),
<emphasis remap='B'>start</emphasis>
(signifying that plus an
<emphasis remap='B'>ipsec auto</emphasis> <option>--up</option>),
and
<emphasis remap='B'>ignore</emphasis>
(also the default) (signifying no automatic startup operation).
See the
<emphasis remap='B'>config setup</emphasis>
discussion below.
Relevant only locally, other end need not agree on it
(but in general, for an intended-to-be-permanent connection,
both ends should use
<emphasis remap='B'>auto=start</emphasis>
to ensure that any reboot causes immediate renegotiation).</para>
<para>
The option <emphasis remap='B'>ondemand</emphasis> used to be called <emphasis remap='B'>route</emphasis>
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>authby</emphasis></term>
  <listitem>
<para>how the two security gateways should authenticate each other;
acceptable values are
<emphasis remap='B'>secret</emphasis>
for shared secrets,
<emphasis remap='B'>rsasig</emphasis>
for RSA digital signatures (the default),
<emphasis remap='B'>secret|rsasig</emphasis>
for either, and
<emphasis remap='B'>never</emphasis>
if negotiation is never to be attempted or accepted (useful for shunt-only conns).
Digital signatures are superior in every way to shared secrets.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>ike</emphasis></term>
  <listitem>
<para>IKE encryption/authentication algorithm to be used
for the connection (phase 1 aka ISAKMP SA).  The format is
<emphasis remap='I'>"cipher-hash;modpgroup, cipher-hash;modpgroup, ..."</emphasis>
Any left out option will be filled in with all allowed default
options. Multiple proposals are separated by a comma. If an
<emphasis remap='B'>ike=</emphasis>
line is specified, no other received proposals will be accepted.
Formerly there was a distinction (by using a <emphasis remap='B'>"!"</emphasis> symbol) between
"strict mode" or not. That mode has been obsoleted. If an <emphasis remap='B'>ike=</emphasis> option is
specified, the mode is always strict, meaning no other received proposals will be accepted.
Some examples are
<emphasis remap='B'>ike=3des-sha1,aes-sha1</emphasis>,
<emphasis remap='B'>ike=aes</emphasis>,
<emphasis remap='B'>ike=aes128-md5;modp2048</emphasis>,
<emphasis remap='B'>ike=aes128-sha1;dh22</emphasis>,
<emphasis remap='B'>ike=3des-md5;modp1024,aes-sha1;modp1536</emphasis> or
<emphasis remap='B'>ike=modp1536</emphasis>.
The options must be suitable as a value of
<citerefentry><refentrytitle>ipsec_spi</refentrytitle><manvolnum>8</manvolnum></citerefentry>'s
<option>--ike</option> option. The default is to use IKE, and to allow all combinations of:
<literallayout remap='.nf'><emphasis remap='B'>
                cipher:                 3des or aes128 or aes256
                hash:                   sha1 or md5
                pfsgroup (DHgroup):     modp1024 or modp1536 or modp2048
</emphasis></literallayout></para>
<para>
Weak algorithms are regularly removed from libreswan. Currently, 1DES and modp768 have been removed and modp1024
will be removed in the near future. Additionally, md5 and sha1 will be removed within the next few years. Null
encryption is available, and should only be used for testing or benchmarking purposes. Please do not request for
insecure algorithms to be re-added to libreswan.
</para>
<para>Diffie-Hellman groups 22, 23 and 24 are also implemented as per RFC-5114. Instead of the modp
key syntax, use the "dh" keyword, for example <emphasis>ike=3des-sha1;dh23</emphasis>
</para>
<para>The modp syntax will be removed in favour of the dh syntax.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>phase2</emphasis></term>
  <listitem>
<para>Sets the type of SA that will be produced. Valid options are:
<emphasis remap='B'>esp</emphasis> for encryption (the default), 
<emphasis remap='B'>ah</emphasis> for authentication only.
</para>
<para>
The very first IPsec designs called for use of AH plus ESP to offer authentication, integrity and confidentiality. That dual protocol
use was a significant burden, so ESP was extended to offer all three services, and AH remained as an auth/integ. Only broken configurations (often used with racoon) require the strange double authentication using <emphasis remap='B'>ah+esp</emphasis>. Additionally, AH does not play well with NATs, so it is strongly recommended to use ESP with the null cipher if you require unencrypted authenticated transport.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>phase2alg</emphasis></term>
  <listitem>
<para> Specifies the algorithms that will be offered/accepted for a phase2
negotiation. If not specified, a secure set of defaults will be used. Sets
are separated using comma's.
</para>
<para>The default values are the same as for ike=
Note also that not all ciphers available to the kernel (eg through CryptoAPI)
are necessarily supported here.</para>
<para> The format for ESP is ENC-AUTH followed by an optional PFSgroup. For
instance, "3des-md5" or "aes256-sha1;modp2048" or  "aes-sha1,aes-md5".
</para>
<para>For RFC-5114 DH groups, use the "dh" keyword, eg "aes256-sha1;dh23"
</para>
<para> The format for AH is AUTH followed by an optional PFSgroup. For
instance, "md5" or "sha1;modp1536".
</para>
<para>AES-GCM and AES-CCM use the syntax like
"phase2alg=aes_ccm_c-256-null". The only supported key sizes are 128,
192 and 256. The subscript (_a, _b and _c) stand for the ICV versions
(8,12,16). It is recommended to migrate to the _c versions, as support
for smaller ICV's will be removed in the future.</para>
<para>Note that openswan and versions of libreswan up to 3.6 require
adding the salt size to the key size. Therefor, to interop with an older
version of openswan or libreswan, use: "phase2alg=aes_ccm_c-280-null". For
CCM, the 'keysize' needs to be increased by 24, resulted in valid keysizes
of 152, 215 and 280. For GCM the 'keysize' needs to be increased by 32,
resulting valid 'keysizes' of 160, 224 and 288.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>sha2-truncbug</emphasis></term>
  <listitem>
<para>The default ESP hash truncation for sha2_256 is 128 bits. Some
IPsec implementations (Linux before 2.6.33, some Cisco (2811?) routers)
implement the draft version which stated 96 bits. If a draft implementation
communicates with an RFC implementation, both ends will reject encrypted
packets from each other.</para>

<para>This option enables using the draft 96 bits version to interop
with those implementations.  Currently the accepted values are
<emphasis remap='B'>no</emphasis>, (the default) signifying default RFC
truncation of 128 bits, or <emphasis remap='B'>yes</emphasis>, signifying
the draft 96 bits truncation.  </para>
<para>Another workaround is to switch from sha2_256 to sha2_128 or sha2_512.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>nat-ikev1-method</emphasis></term>
  <listitem>
<para>NAT Traversal in IKEv1 is negotiated via Vendor ID options as specified in RFC 3947.
However, many implementations only support the draft version of the RFC. Libreswan sends
both the RFC and the most common draft versions (02, 02_n and 03) to maximize interoperability.
Unfortunately, there are known broken implementations of RFC 3947, notably Cisco routers that
have not been updated to the latest firmware. As the NAT-T payload is sent in the very first
packet of the initiator, there is no method to auto-detect this problem and initiate a workaround.
</para>

<para>This option allows fine tuning which of the NAT-T payloads to consider for sending and processing.
Currently the accepted values are <emphasis remap='B'>drafts</emphasis>, 
<emphasis remap='B'>rfc</emphasis> or <emphasis remap='B'>both</emphasis> (the default). To interoperate
with known broken devices, use nat-ikev1-method=drafts.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>esp</emphasis></term>
  <listitem>
<para>This option is obsolete. Please use <emphasis remap='B'>phase2alg</emphasis>
instead.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>ah</emphasis></term>
  <listitem>
<para>AH authentication algorithm to be used
for the connection, e.g here.
<emphasis remap='B'>hmac-md5</emphasis>
The options must be suitable as a value of
<citerefentry><refentrytitle>ipsec_spi</refentrytitle><manvolnum>8</manvolnum></citerefentry>'s
<option>--ah</option>
option.
The default is not to use AH. If for some (invalid) reason you still think you need AH, please
use esp with the null encryption cipher instead. Note also that not all ciphers available to the kernel (eg through CryptoAPI) are necessarily supported here.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>ike-frag</emphasis></term>
  <listitem>
<para>Whether or not to allow IKE fragmentation. Valid values are are
<emphasis remap='B'>yes</emphasis>, (the default), <emphasis remap='B'>no</emphasis>
or <emphasis remap='B'>force</emphasis>. 
    </para><para>
IKE fragmentation capabilities are negotiated via <emphasis remap='I'>vendor
id</emphasis>.
If pluto does not receive the FRAGMENTATION vendor id, no IKE fragments will
be sent, regardless of the ike-frag= setting. When set to
<emphasis remap='B'>yes</emphasis>, IKE fragmentation will be attempted
on the first re-transmit of an IKE packet of a size larger then 576 bytes for
IPv4 and 1280 bytes for IPv6.
If ike-frag is set to force, IKE fragmentation is used on initial transmits of
such sized packets as well.
When we have received IKE fragments for a connection, pluto behaves as if in
force mode.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>ikepad</emphasis></term>
  <listitem>
<para>Whether or not to pad IKE messages to a multiple of 4 bytes. Valid values are are
<emphasis remap='B'>yes</emphasis>, (the default) and <emphasis remap='B'>no</emphasis>.
    </para><para>
Normal RFC compliant behaviour is to use IKE padding. However some devices, for instance
Checkpoint, can be configured to firewall Aggressive Mode IKE packets that have been padded.
This option disables the required IKE padding for interop which such devices. This option
should almost never be enabled.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>ikev2</emphasis></term>
  <listitem>
<para>IKEv2 (RFC4309) settings to be used. Currently the accepted values
are
<emphasis remap='B'>permit</emphasis>,
(the default)
signifying no IKEv2 should be transmitted, but will be accepted if the other
ends initiates to us with IKEv2;
<emphasis remap='B'>never</emphasis> or <emphasis remap='B'>no</emphasis>
signifying no IKEv2 negotiation should be transmitted or accepted;
<emphasis remap='B'>propose</emphasis> or <emphasis remap='B'>yes</emphasis>
signifying that we permit IKEv2, and also use it as the default to initiate;
<emphasis remap='B'>insist</emphasis>,
signifying we only accept and receive IKEv2 - IKEv1 negotiations will be
rejected.
</para><para>
If the ikev2= setting is set to <emphasis remap='B'>permit</emphasis>
or <emphasis remap='B'>propose</emphasis>, Libreswan will try and detect a
"bid down" attack from IKEv2 to IKEv1.  Since there is no standard for
transmitting the IKEv2 capability with IKEv1, Libreswan uses a special
Vendor ID "CAN-IKEv2". If a fall back from IKEv2 to IKEv1 was detected,
and the IKEv1 negotiation contains Vendor ID "CAN-IKEv2", Libreswan will
immediately attempt and IKEv2 rekey and refuse to use the IKEv1 connection.
With an ikev2= setting of <emphasis remap='B'>insist</emphasis>, no IKEv1
negotiation is allowed, and no bid down attack is possible.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>narrowing</emphasis></term>
  <listitem>
<para>IKEv2 (RFC5996) Section 2.9 Traffic Selector narrowing options.
Currently the accepted values are <emphasis remap='B'>no</emphasis>,
(the default) signifying no narrowing will be proposed or accepted, or
<emphasis remap='B'>yes</emphasis>, signifying IKEv2 negotiation may
allow establishing an IPsec connection with narrowed down traffic
selectors. This option is ignored for IKEv1.</para>
<para>There are security implications in allowing narrowing down the
proposal. For one, what should be done with packets that we hoped to
tunnel, but cannot. Should these be dropped or send in the clear? Second,
this could cause thousands of narrowed down Child SAs to be created
if the conn has a broad policy (eg 0/0 to 0/0).  One possible good use
case scenario is that a remote end (that you fully trust) allows you to
define a 0/0 to them, while adjusting what traffic you route via them,
and what traffic remains outside the tunnel. However, it is always
preferred to setup the exact tunnel policy you want, as this will be
much clearer to the user.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>sareftrack</emphasis></term>
  <listitem>
<para>Set the method of tracking reply packets with SArefs when using an
SAref compatible stack. Currently only the <emphasis remap='I'>mast</emphasis>
stack supports this.  Acceptable values are <emphasis remap='B'>yes</emphasis>
(the default), <emphasis remap='B'>no</emphasis> or <emphasis remap='B'>conntrack</emphasis>. This option is ignored when SArefs are not supported. This option
is passed as PLUTO_SAREF_TRACKING to the <emphasis remap='I'>updown</emphasis>
script which makes the actual decisions whether to perform any iptables/ip_conntrack
manipulation. A value of yes means that an IPSEC mangle table will be created. This table
will be used to match reply packets. A value of conntrack means that
additionally, subsequent packets using this connection will be marked as
well, reducing the lookups needed to find the proper SAref by using the
ip_conntrack state. A value of no means no IPSEC mangle table is created,
and SAref tracking is left to a third-party (kernel) module. In case of a third
party module, the SArefs can be relayed using the <emphasis remap='I'>statsbin=</emphasis> notification helper.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>leftid</emphasis></term>
  <listitem>
<para>how


the left participant
should be identified for authentication;
defaults to
<emphasis remap='B'>left</emphasis>.
Can be an IP address (in any
<citerefentry><refentrytitle>ipsec_ttoaddr</refentrytitle><manvolnum>3</manvolnum></citerefentry>
syntax)
or a fully-qualified domain name which will be resolved. If preceded by
<emphasis remap='B'>@</emphasis>, the value is used as a literal string
and will not be resolved.

To support opaque identifiers (usually of type ID_KEY_ID, such as used by
Cisco to specify Group Name, use square brackets, eg <emphasis remap='B'>rightid=@[GroupName]</emphasis>.

The magic value
<emphasis remap='B'>%fromcert</emphasis>
causes the ID to be set to a DN taken from a certificate that is loaded.
Prior to 2.5.16, this was the default if a certificate was specified.

The magic value
<emphasis remap='B'>%none</emphasis>
sets the ID to no ID. This is included for completeness, as the ID may
have been set in the default conn, and one wishes for it to default instead
of being explicitly set.

The magic value
<emphasis remap='B'>%myid</emphasis>
stands for the current setting of <emphasis remap='I'>myid</emphasis>.

This is set in <emphasis remap='B'>config setup</emphasis> or by <citerefentry><refentrytitle>ipsec_whack</refentrytitle><manvolnum>8</manvolnum></citerefentry>), or, if not set,
it is the IP address in <emphasis remap='B'>%defaultroute</emphasis> (if that is supported by a TXT record in its reverse domain), or otherwise
it is the system's hostname (if that is supported by a TXT record in its forward domain), or otherwise it is undefined.</para>
<para>
When using certificate based ID's, one need to specify the full RDN, optionally using wildcard matching (eg CN='*'). If
the RDN contains a comma, this can be masked using a comma (eg OU='Foo,, Bar and associates')</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftrsasigkey</emphasis></term>
  <listitem>
<para>the left participant's
public key for RSA signature authentication,
in RFC 2537 format using
<citerefentry><refentrytitle>ipsec_ttodata</refentrytitle><manvolnum>3</manvolnum></citerefentry>
encoding.
The magic value
<emphasis remap='B'>%none</emphasis>
means the same as not specifying a value (useful to override a default).
The value
<emphasis remap='B'>%dnsondemand</emphasis>
(the default)
means the key is to be fetched from DNS at the time it is needed.
The value
<emphasis remap='B'>%dnsonload</emphasis>
means the key is to be fetched from DNS at the time
the connection description is read from
<emphasis remap='I'>ipsec.conf</emphasis>;
currently this will be treated as
<emphasis remap='B'>%none</emphasis>
if
<emphasis remap='B'>right=%any</emphasis>
or
<emphasis remap='B'>right=%opportunistic</emphasis>.
The value
<emphasis remap='B'>%dns</emphasis>
is currently treated as
<emphasis remap='B'>%dnsonload</emphasis>
but will change to
<emphasis remap='B'>%dnsondemand</emphasis>
in the future.
The identity used for the left participant
must be a specific host, not
<emphasis remap='B'>%any</emphasis>
or another magic value.
The value 
<emphasis remap='B'>%cert</emphasis>
will load the information required from a certificate defined in
<emphasis remap='B'>%leftcert</emphasis>
and automatically define leftid for you.
<emphasis remap='B'>Caution:</emphasis>
if two connection descriptions
specify different public keys for the same
<emphasis remap='B'>leftid</emphasis>,
confusion and madness will ensue.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftrsasigkey2</emphasis></term>
  <listitem>
<para>if present, a second public key.
Either key can authenticate the signature, allowing for key rollover.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftcert</emphasis></term>
  <listitem>
<para>If you are using
<emphasis remap='B'>leftrsasigkey=%cert</emphasis>
this defines the certificate you would like to use. It should point to a X.509
encoded certificate file. If you do not specify a full pathname, by default it
will look in /etc/ipsec.d/certs. Libreswan will also check the
NSS database for RSA keys. These can be software or hardware.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftca</emphasis></term>
  <listitem>
<para>specifies the authorized Certificate Authority (CA) that signed the
certificate of the peer. If undefined, it defaults to the CA that signed
the certificate specified in <emphasis remap='B'>leftcert</emphasis>.
The special <emphasis remap='B'>rightca=%same</emphasis> is implied when
not specifying a <emphasis remap='B'>rightca</emphasis> and means that
only peers with certificates signed by the same CA as the leftca will be
allowed. This option is only useful in complex multi CA certificate
situations. When using a single CA, it can be safely omitted for both
left and right.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftsendcert</emphasis></term>
  <listitem>
<para>This option configures when Libreswan will send X.509 certificates to the remote
host. Acceptable values are 
<emphasis remap='B'>yes|always</emphasis>
(signifying that we should always send a certificate),
<emphasis remap='B'>ifasked</emphasis>
(signifying that we should send a certificate if the remote end asks for it), and
<emphasis remap='B'>no|never</emphasis>
(signifying that we will never send a X.509 certificate).
The default for this option is 
<emphasis remap='B'>ifasked</emphasis>
which may break compatibility with other vendor's IPSec implementations, such as
Cisco and SafeNet. If you find that you are getting errors about no ID/Key found,
you likely need to set this to
<emphasis remap='B'>always</emphasis>.
This per-conn option replaces the obsolete global <emphasis remap='B'>nocrsend</emphasis>
option.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftxauthserver</emphasis></term>
  <listitem>
<para>Left is an XAUTH server. This can use PAM for authentication or md5 passwords
in <emphasis remap='I'>/etc/ipsec.d/passwd</emphasis>. These are additional credentials
to verify the user identity, and should not be confused with the XAUTH
<emphasis remap='B'>group secret</emphasis>, which is just a regular PSK defined in
<emphasis remap='I'>ipsec.secrets</emphasis>.  The other side of the connection
should be configured as <emphasis remap='B'>rightxauthclient</emphasis>. XAUTH
connections cannot rekey, so <emphasis remap='B'>rekey=no</emphasis> should be
specified in this conn.  For further details on how to compile and use XAUTH, see README.XAUTH.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>leftxauthclient</emphasis></term>
  <listitem>
<para>Left is an XAUTH client. The xauth connection will have to be started
interactively and cannot be configured using <emphasis remap='B'>auto=start</emphasis>.
Instead, it has to be started from the commandline using
<emphasis remap='I'>ipsec auto --up connname</emphasis>. You will then be prompted
for the username and password. To setup an XAUTH connection non-interactively, which
defeats the whole purpose of XAUTH, but is regularly requested by users, it is
possible to use a whack command - <emphasis remap='I'>ipsec whack  --name baduser --ipsecgroup-xauth --xauthname badusername --xauthpass password --initiate</emphasis>
The other side of the connection should be configured as <emphasis remap='B'>rightxauthserver</emphasis>.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>leftxauthusername</emphasis></term>
  <listitem>
<para>The XAUTH username associated with this XAUTH connection. The XAUTH
password can be configured in the <emphasis remap='I'>ipsec.secrets</emphasis>
file.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>leftmodecfgserver</emphasis></term>
  <listitem>
<para>Left is a Mode Config server. It can push network configuration to the client.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>leftmodecfgclient</emphasis></term>
  <listitem>
<para>Left is a Mode Config client. It can receive network configuration from the server.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).</para>
  </listitem>
  </varlistentry>


  <varlistentry>
  <term><emphasis remap='B'>xauthby</emphasis></term>
  <listitem>
<para>When XAUTH support is available, set the method used by XAUTH to authenticate
the user. The currently supported values are <emphasis remap='I'>file</emphasis> (the default),
 <emphasis remap='I'>pam</emphasis> or  <emphasis remap='I'>alwaysok</emphasis>. 
The password file is located at <emphasis remap='I'>/etc/ipsec.d/passwd</emphasis>,
and follows a syntax similar to the Apache htpasswd file, except an additional connection
name argument is also present:
</para>
<para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <emphasis remap='I'>username:password:conname</emphasis></para>
<para>For supported password hashing methods, see <citerefentry><refentrytitle>crypt</refentrytitle>
<manvolnum>3</manvolnum></citerefentry>. If pluto is running in FIPS mode, some hash methods,
such as MD5, might not be available. Threads are used
to launch an xauth authentication helper for file as well as PAM methods.
</para>
<para>The <emphasis remap='I'>alwaysok</emphasis> should only be used if the XAUTH user authentication is not really
used, but is required for interoperability, as it defeats the whole point of XAUTH which is to rely on a secret only
known by a human.
</para>
</listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>xauthfail</emphasis></term>
  <listitem>
<para>When XAUTH support is available, set the failure method desired when authentication has failed.
The currently supported values are <emphasis remap='I'>hard</emphasis> (the default) and
<emphasis remap='I'>soft</emphasis>. A soft failure means the IPsec SA is allowed to be established,
as if authentication had passed successfully, but the XAUTH_FAILED environment variable will be set
to 1 for the updown script, which can then be used to redirect the user into a walled garden, for example
a payment portal.
</para>
</listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>modecfgpull</emphasis></term>
  <listitem>
<para>Pull the Mode Config network information from the server.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>modecfgdns1</emphasis></term>
  <term><emphasis remap='B'>modecfgdns2</emphasis></term>
  <term><emphasis remap='B'>modecfgdomain</emphasis></term>
  <term><emphasis remap='B'>modecfgbanner</emphasis></term>
  <listitem>
<para>
When configured as modecfg server, specifying any of these options will
cause those options and values to be sent to the modecfg client during
the XAUTH+ModeCFG phase (phase 1.5).
</para>
<para>
When we are an XAUTH client, these options will be treated as defaults. If the remote
XAUTH server did not pass us one of these options, the configured defaults are used
to reconfigure the local DNS setup.
</para>
<para>The split tunneling directive will be sent automatically if the xauth server side has
configured a network other than 0.0.0.0/0
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>remote-peer-type</emphasis></term>
  <listitem>
<para>Set the remote peer type. This can enable additional processing
during the IKE negotiation.  Acceptable values are <emphasis
remap='B'>cisco</emphasis> or <emphasis remap='B'>ietf</emphasis>
(the default).  When set to cisco, support for Cisco IPsec gateway
redirection and Cisco obtained DNS and domainname are enabled.  This
includes automatically updating (and restoring) /etc/resolv.conf. These
options require that  XAUTH is also enabled on this connection.  </para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>nm-configured</emphasis></term>
  <listitem>
<para>Mark this connection as controlled by Network Manager.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default). Currently, setting this to yes will cause libreswan to skip
reconfiguring resolv.conf when used with XAUTH and ModeConfig.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>forceencaps</emphasis></term>
  <listitem>
<para>
In some cases, for example when ESP packets are filtered or when a broken
IPsec peer does not properly recognise NAT, it can be useful to force
RFC-3948 encapsulation.
<emphasis remap='B'>forceencaps=yes</emphasis> forces the NAT detection
code to lie and tell the remote peer that RFC-3948 encapsulation (ESP in UDP
port 4500 packets) is required. For this option to have any effect, the setup section option
<emphasis remap='B'>nat_traversal=yes</emphasis> needs to be set.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>nat-keepalive</emphasis></term>
  <listitem>
<para>whether to send any NAT-T keep-alives. These one byte packets 
are send to prevent the NAT router from closing its port when there is
not enough traffic on the IPsec connection. Acceptable values are:
<emphasis remap='B'>yes</emphasis> (the default) and
<emphasis remap='B'>no</emphasis>.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>initial-contact</emphasis></term>
  <listitem>
<para>whether to send an INITIAL_CONTACT payload to the peer we are initiating to, if we currently have no
IPsec SAs up with that peer.  Acceptable values are: <emphasis remap='B'>no</emphasis> (the default) and
<emphasis remap='B'>yes</emphasis>.

It is recommended to leave this option unset, unless the remote peer
requires it to allow reconnects. The only known peer at this time
is Cisco, which will not allow a reconnect (despite authentication)
to replace an existing IPsec SA unless it receives an INITIAL_CONTACT
payload. Receiving this payload is ignored and the choice to replace
or add an IPsec SA when libreswan is a responder is purely based on
the <emphasis remap='B'>uniqueids</emphasis> setting, which should be
left enabled unless libreswan acts as an XAUTH server using PSK ("group
secret").  This option can cause a few seconds of downtime on the IPsec
tunnel between the time the remote clears the old IPsec SA in response
to our INITIAL_CONTACT message, and the time we finish setting up the
new IPsec SA. If there is an XAUTH step in between, and especially when
XAUTH requires the use of some two-factor token, this downtime could be
even longer.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>cisco-unity</emphasis></term>
  <listitem>
<para>whether to send a CISCO_UNITY payload to the peer we are initiating to.
Acceptable values are: <emphasis remap='B'>no</emphasis> (the default) and
<emphasis remap='B'>yes</emphasis>.

It is recommended to leave this option unset, unless the remote peer
(Cisco) requires it. This is an experimental option. It does not modify local
behaviour. It is expected the remote peer might behave differently when it
receives this vendor id. This option might be removed in a future release.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>overlapip</emphasis></term>
  <listitem>
<para>a boolean (yes/no) that determines, when *subnet=vhost: is used, if
the virtual IP claimed by this states created from this connection can with
states created from other connections.
</para>
<para>
Note that connection instances created by the Opportunistic Encryption or PKIX (x.509) instantiation
system are distinct internally. They will inherit this policy bit.
</para>
<para>
The default is no. 
</para>
<para>
This feature is only available with kernel drivers that support SAs to overlapping conns.
At present only the (klips) mast protocol stack supports this feature.
</para>
</listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>reqid</emphasis></term>
  <listitem>
<para>
a unique identifier used to match IPsec SAs using iptables with
NETKEY/XFRM. This identifier is normally automatically allocated in groups
of 4. It is exported to the _updown script as REQID. On Linux, reqids are
supported with IP Connection Tracking and NAT (iptables). Automatically
generated values use the range 16380 and higher. Manually specified
reqid values therefor must be between 1 and 16379.
</para>
<para>
Automatically generated reqids use a range of 0-3 (eg 16380-16383 for the
first reqid). These are used depending on the exact policy (AH, AH+ESP,
IPCOMP, etc). Manually assigned reqids are all identical. Instantiations
of connections (those using %any wildcards) will all use the same reqid.
</para>
<para>
For KLIPS, when using the MAST variant, a different mechanism called
SAref is in use. See overlapip and sareftrack.
</para>
</listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>dpddelay</emphasis></term>
  <listitem>
<para>Set the delay (in seconds) between Dead Peer Detection
(RFC 3706) keepalives (R_U_THERE, R_U_THERE_ACK)
that are sent for this connection (default
<literal>30</literal>
seconds).  If dpddelay is set, dpdtimeout also needs to be set.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>dpdtimeout</emphasis></term>
  <listitem>
<para>Set the length of time (in seconds) we will idle without hearing either an
R_U_THERE poll from our peer, or an R_U_THERE_ACK reply.  After this period
has elapsed with no response and no traffic, we will declare the peer dead,
and remove the SA (default
<literal>120</literal>
seconds).  If dpdtimeout is set, dpdaction also needs to be set.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>dpdaction</emphasis></term>
  <listitem>
<para>When a DPD enabled peer is declared dead, what action should be taken.
<emphasis remap='B'>hold</emphasis> (default) means the eroute will be put into %hold status, while
<emphasis remap='B'>clear</emphasis> means the eroute and SA with both be cleared. 
<emphasis remap='B'>restart</emphasis> means that <emphasis remap='I'>ALL</emphasis> SAs
to the dead peer will renegotiated.</para>
<para><emphasis remap='I'>dpdaction=clear</emphasis> is really only useful on the server of a Road Warrior config.
</para>
<para>The value <emphasis remap='B'>restart_by_peer</emphasis> has been obsoleted and its functionality moved
into the regular restart action.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>pfs</emphasis></term>
  <listitem>
<para>whether Perfect Forward Secrecy of keys is desired on the connection's
keying channel
(with PFS, penetration of the key-exchange protocol
does not compromise keys negotiated earlier);
Since there is no reason to ever refuse PFS, Libreswan will allow a connection defined with
<emphasis remap='B'>pfs=no</emphasis> to use PFS anyway.
Acceptable values are
<emphasis remap='B'>yes</emphasis>
(the default)
and
<emphasis remap='B'>no</emphasis>.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>pfsgroup</emphasis></term>
  <listitem>
<para>
This option is obsoleted, please use phase2alg if you need the PFS
to be different from phase1 (the default) using:
  phase2alg=aes128-md5;modp1024
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>aggrmode</emphasis></term>
  <listitem>
<para>Use Aggressive Mode instead of Main Mode. Aggressive Mode is less secure,
and vulnerable to Denial Of Service attacks. It is also vulnerable to brute force
attacks with software such as <emphasis remap='B'>ikecrack</emphasis>. It should
not be used, and it should especially not be used with XAUTH and group secrets (PSK).
If the remote system administrator insists on staying irresponsible, enable this option.</para>
<para>Aggressive Mode is further limited to only proposals with one DH group as there is no room to
negotiate the DH group. Therefor it is mandatory for Aggressive Mode connections that both
<emphasis remap='B'>ike=</emphasis> and <emphasis remap='B'>phase2alg=</emphasis> options are
specified with only fully specified proposal using one DH group.
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).</para>
<para>
The ISAKMP SA is created in exchange 1 in aggressive mode. Libreswan has to send the exponent
during that exchange, so it has to know what DH group to use before starting. This is why you
can not have multiple DH groups in aggressive mode.  In IKEv2, which uses a similar method to
IKEv1 Aggressive Mode, there is a message to convey the DH group is wrong, and so an IKEv2
connection can actually recover from picking the wrong DH group by restarting its negotiation.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>salifetime</emphasis></term>
  <listitem>
<para>how long a particular instance of a connection
(a set of encryption/authentication keys for user packets) should last,
from successful negotiation to expiry;
acceptable values are an integer optionally followed by
<emphasis remap='B'>s</emphasis>
(a time in seconds)
or a decimal number followed by
<emphasis remap='B'>m</emphasis>,
<emphasis remap='B'>h</emphasis>,
or
<emphasis remap='B'>d</emphasis>
(a time
in minutes, hours, or days respectively)
(default
<emphasis remap='B'>8h</emphasis>,
maximum
<emphasis remap='B'>24h</emphasis>).
Normally, the connection is renegotiated (via the keying channel)
before it expires.
The two ends need not exactly agree on
<emphasis remap='B'>salifetime</emphasis>,
although if they do not,
there will be some clutter of superseded connections on the end
which thinks the lifetime is longer. </para>
<para>
The keywords "keylife" and "lifetime" are obsoleted aliases for "salifetime."
Change your configs to use "salifetime" instead.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>rekey</emphasis></term>
  <listitem>
<para>whether a connection should be renegotiated when it is about to expire;
acceptable values are
<emphasis remap='B'>yes</emphasis>
(the default)
and
<emphasis remap='B'>no</emphasis>.
The two ends need not agree,
but while a value of
<emphasis remap='B'>no</emphasis>
prevents Pluto from requesting renegotiation,
it does not prevent responding to renegotiation requested from the other end,
so
<emphasis remap='B'>no</emphasis>
will be largely ineffective unless both ends agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>rekeymargin</emphasis></term>
  <listitem>
<para>how long before connection expiry or keying-channel expiry
should attempts to
negotiate a replacement
begin; acceptable values as for
<emphasis remap='B'>salifetime</emphasis>
(default
<emphasis remap='B'>9m</emphasis>).
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>rekeyfuzz</emphasis></term>
  <listitem>
<para>maximum percentage by which
<emphasis remap='B'>rekeymargin</emphasis>
should be randomly increased to randomize rekeying intervals
(important for hosts with many connections);
acceptable values are an integer,
which may exceed 100,
followed by a `%'
(default set by
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
currently
<emphasis remap='B'>100%</emphasis>).
The value of
<emphasis remap='B'>rekeymargin</emphasis>,
after this random increase,
must not exceed
<emphasis remap='B'>salifetime</emphasis>.
The value
<emphasis remap='B'>0%</emphasis>
will suppress time randomization.
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>keyingtries</emphasis></term>
  <listitem>
<para>how many attempts (a whole number or <emphasis remap='B'>%forever</emphasis>) should be made to
negotiate a connection, or a replacement for one, before giving up
(default
<emphasis remap='B'>%forever</emphasis>).
The value <emphasis remap='B'>%forever</emphasis>
means &ldquo;never give up&rdquo; (obsolete: this can be written <literal>0</literal>).
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>ikelifetime</emphasis></term>
  <listitem>
<para>how long the keying channel of a connection (buzzphrase:  &ldquo;ISAKMP SA&rdquo;)
should last before being renegotiated;
acceptable values as for
<emphasis remap='B'>salifetime</emphasis>
(default set by
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
currently
<emphasis remap='B'>1h</emphasis>,
maximum
<emphasis remap='B'>24h</emphasis>).
The two-ends-disagree case is similar to that of
<emphasis remap='B'>salifetime</emphasis>.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>compress</emphasis></term>
  <listitem>
<para>whether IPComp compression of content is proposed on the connection
(link-level compression does not work on encrypted data,
so to be effective, compression must be done <emphasis remap='I'>before</emphasis> encryption);
acceptable values are
<emphasis remap='B'>yes</emphasis>
and
<emphasis remap='B'>no</emphasis>
(the default).
</para><para>
As of libreswan 3.1, both ends <emphasis remap='B'>must</emphasis>
agree. In previous versions of libreswan, openswan and freeswan,
compression was always accepted even if not configured. In light of the
BEAST attacks on TLS, using compression and encryptions has come under
more scrutiny, and it was decided that it should be possible for the local
policy of an endpoint to disallow  compression.  A value of
<emphasis remap='B'>yes</emphasis> causes pluto to propose compression and reject
proposals without it.  A value of <emphasis remap='B'>no</emphasis>
prevents pluto from proposing compression; a proposal to compress will
be <emphasis remap='B'>rejected</emphasis>.</para>
  </listitem>
  </varlistentry>


  <varlistentry>
  <term><emphasis remap='B'>metric</emphasis></term>
  <listitem>
<para>
Set the metric for the routes to the ipsecX or mastX interface. This makes it
possible to do host failover from another interface to ipsec using
route management. This value is passed to the _updown scripts as
PLUTO_METRIC. This option is only available with KLIPS or MAST on Linux.

Acceptable values are positive numbers, with the default being <emphasis remap='B'>1</emphasis>.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>mtu</emphasis></term>
  <listitem>
<para>
Set the MTU for the route(s) to the remote endpoint and/or subnets. This is sometimes
required when the overhead of the IPsec encapsulation would cause the packet the become
too big for a router on the path. Since IPsec cannot trust any unauthenticated ICMP
messages, PATH MTU discovery does not work. This can also be needed when using "6to4"
IPV6 deployments, which adds another header on the packet size.

Acceptable values are positive numbers. There is no default.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>priority</emphasis></term>
  <listitem>
<para>The priority in the kernel SPD/SAD database, when matching up packets.
Each kernel (NETKEY, KLIPS, OSX, etc) has its own mechanism for setting the
priority. Setting this option to non-zero passes the priority to the kernel stack
unmodified. The maximum value depends on the stack. It is recommended not to exceed
65536</para>
<para>
KLIPS and NETKEY use a priority system based on "most specific match
first". It uses an internal algorithm to calculate these based on network prefix length,
protocol and port selectors. A lower value means a higher priority.
</para>
<para>
Typical values are about the 2000 range. These can be seen on the NETKEY stack using
<emphasis remap='B'>ip xfrm policy</emphasis> when the connection is up. For "anonymous IPsec" or Opportunistic Encryption based connections, a much lower priority (65535) is used to ensure administrator configured IPsec always takes precedence over opportunistic IPsec. 
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>disablearrivalcheck</emphasis></term>
  <listitem>
<para>whether KLIPS's normal tunnel-exit check
(that a packet emerging from a tunnel has plausible addresses in its header)
should be disabled;
acceptable values are
<emphasis remap='B'>yes</emphasis>
and
<emphasis remap='B'>no</emphasis>
(the default).
Tunnel-exit checks improve security and do not break any normal configuration.
Relevant only locally, other end need not agree on it.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>labeled-ipsec</emphasis></term>
  <listitem>
<para>
Whether labeled IPsec should be enabled or not; acceptable values are
<emphasis remap='B'>no</emphasis> (the default) and <emphasis remap='B'>yes</emphasis>.
See also loopback=, policy-label= and secctx-attr-value=
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>policy-label</emphasis></term>
  <listitem>
<para>
The string representation of an access control security label that is interpreted by the LSM (e.g. SELinux)
for use with Labeled IPsec. See also loopback=, labeled-ipsec= and secctx-attr-value=. For example,
<emphasis remap='I'>policy-label=system_u:object_r:ipsec_spd_t:s0-s15:c0.c1023</emphasis>
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>loopback</emphasis></term>
  <listitem>
<para>
Whether labeled IPsec loopback should be enabled or not; acceptable values are
<emphasis remap='B'>no</emphasis> (the default) or yes.
Note that some Linux kernels disable some XFRM/NETKEY functions required
for loopback that can prevent Labeled IPsec from working correctly. Ensure
that both <emphasis remap='I'>/proc/sys/net/ipv4/conf/lo/disable_xfrm</emphasis>
and <emphasis remap='I'>/proc/sys/net/ipv4/conf/lo/disable_policy</emphasis>
are set to 0.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>failureshunt</emphasis></term>
  <listitem>
<para>what to do with packets when negotiation fails.
The default is
<emphasis remap='B'>none</emphasis>:
no shunt;
<emphasis remap='B'>passthrough</emphasis>,
<emphasis remap='B'>drop</emphasis>,
and
<emphasis remap='B'>reject</emphasis>
have the obvious meanings.</para>
  </listitem>
  </varlistentry>
</variablelist>
</refsect2>
</refsect1>


<refsect1 id='config_sections'><title>CONFIG SECTIONS</title>
<para>At present, the only
<emphasis remap='B'>config</emphasis>
section known to the IPsec software is the one named
<emphasis remap='B'>setup</emphasis>,
which contains information used when the software is being started
(see
<citerefentry><refentrytitle>ipsec_setup</refentrytitle><manvolnum>8</manvolnum></citerefentry>).
Here's an example:</para>

<!-- .ne 8 -->
<literallayout remap='.nf'>
<!-- .ta 1c -->
<emphasis remap='B'>
config setup
	interfaces="ipsec0=eth1 ipsec1=ppp0"
	klipsdebug=none
	plutodebug=control
	protostack=auto
</emphasis>
</literallayout> <!-- .fi -->

<para>Parameters are optional unless marked &ldquo;(required)&rdquo;.</para>

<para>The currently-accepted
<emphasis remap='I'>parameter</emphasis>
names in a
<emphasis remap='B'>config setup</emphasis>
section are:</para>

<variablelist remap='TP'>

  <varlistentry>
  <term><emphasis remap='B'>myid</emphasis></term>
  <listitem>
<para>the identity to be used for
<emphasis remap='B'>%myid</emphasis>.
<emphasis remap='B'>%myid</emphasis>
is used in the implicit policy group conns and can be used as
an identity in explicit conns.
If unspecified,
<emphasis remap='B'>%myid</emphasis>
is set to the IP address in <emphasis remap='B'>%defaultroute</emphasis> (if that is supported by a TXT record in its reverse domain), or otherwise
the system's hostname (if that is supported by a TXT record in its forward domain), or otherwise it is undefined.
An explicit value generally starts with ``<emphasis remap='B'>@</emphasis>''.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>protostack</emphasis></term>
  <listitem>
<para>decide which protocol stack is going to be used. Valid values are "klips", "netkey" (the default) and "mast". The "mast" stack is a variation for the KLIPS stack. The value "auto" has been obsoleted.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>interfaces</emphasis></term>
  <listitem>
<para>virtual and physical interfaces for IPsec to use:
a single
<emphasis remap='I'>virtual</emphasis><emphasis remap='B'>=</emphasis><emphasis remap='I'>physical</emphasis> pair, a (quoted!) list of pairs separated
by white space, or
<emphasis remap='B'>%none</emphasis>.
One of the pairs may be written as
<emphasis remap='B'>%defaultroute</emphasis>,
which means: find the interface <emphasis remap='I'>d</emphasis> that the default route points to,
and then act as if the value was ``<emphasis remap='B'>ipsec0=</emphasis><emphasis remap='I'>d</emphasis>''.
<emphasis remap='B'>%defaultroute</emphasis>
is the default;
<emphasis remap='B'>%none</emphasis>
must be used to denote no interfaces, or when using the NETKEY stack.
If
<emphasis remap='B'>%defaultroute</emphasis>
is used (implicitly or explicitly)
information about the default route and its interface is noted for
use by
<citerefentry><refentrytitle>ipsec_auto</refentrytitle><manvolnum>8</manvolnum></citerefentry>.)</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>listen</emphasis></term>
  <listitem>
<para>IP address to listen on (default depends on <emphasis remap='B'>interfaces=</emphasis> setting).
Currently only accepts one IP address.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>ikeport</emphasis></term>
  <listitem>
<para>The IKE port to listen on. The default value is <emphasis remap='B'>500</emphasis>.
As IKE is an internet standard, changing this means pluto will no longer be able to
interop with other devices, unless they have also been explicitly configured to use a
non-standard IKE port. There might also be other subtle assumptions within the kernel
that port 500 is used. Changing this port is strongly discouraged, and should probably
only be done for testing or when required to circumvent VPN blocking technologies as
employed by certain commercial companies and national governments. See also 
<emphasis remap='B'>nat-ikeport</emphasis>.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>nat_traversal</emphasis></term>
  <listitem>
<para>OBSOLETE.  Support for NAT Traversal is always enabled.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>disable_port_floating</emphasis></term>
  <listitem>
<para>OBSOLETE</para>

  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>force_keepalive</emphasis></term>
  <listitem>
<para>This option has been obsoleted since libreswan version 3.2. See the
<emphasis remap='I'>nat-keepalive</emphasis> option.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>nat-ikeport</emphasis></term>
  <listitem>
<para>The IKE NAT Traversal floating port (see RFC-3947) to listen on. The default
value is <emphasis remap='B'>4500</emphasis>.
As IKE/NATT is an internet standard, changing this means pluto will no longer be able to
interoperate with other devices, unless they have also been explicitly configured to use a
non-standard IKE/NATT port. There might also be other subtle assumptions within the kernel
that port 4500 is used. Changing this port is strongly discouraged, and should probably
only be done for testing or when required to circumvent VPN blocking technologies as
employed by certain commercial companies and national governments. See also 
<emphasis remap='B'>ikeport</emphasis>.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>keep-alive</emphasis></term>
  <listitem>
<para>The delay (in seconds) for NAT-T keep-alive packets, if these
are enabled using <emphasis remap='B'>nat-keepalive</emphasis>
This parameter may eventually become per-connection.</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>retransmits</emphasis></term>
  <listitem>
<para>Whether pluto should attempt to retransmit packets that get no reply.
This is mostly used to disable retransmits while debugging a problem. Production
use should always leave this enabled. The default is <emphasis remap='B'>yes</emphasis>.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>virtual-private</emphasis></term>
  <listitem>
<para>contains the networks that are allowed as subnet= for the remote
clients when using the <emphasis remap='B'>vhost:</emphasis> or <emphasis remap='B'>vnet:</emphasis>
keywords in the <emphasis remap='B'>subnet=</emphasis> parameters.
In other words, the address ranges that may live behind a NAT
router through which a client connects.  This value is usually set to
all the RFC-1918 address space, excluding the space used in the local
subnet behind the NAT (An IP address cannot live at two places at once).
IPv4 address ranges are denoted as
<emphasis remap='I'>%v4:a.b.c.d/mm</emphasis>
and IPv6 is denoted as
<emphasis remap='I'>%v6:aaaa::bbbb:cccc:dddd:eeee/mm</emphasis>. One
can exclude subnets by using the <emphasis remap='B'>!</emphasis>.
For example, if the VPN server is giving access to 192.168.1.0/24,
this option should be set to:
<emphasis remap='I'>virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!192.168.1.0/24</emphasis>.
This parameter is only needed on the server side and not on the client side that resides behind the NAT router, as
the client will just use its IP address for the inner IP setting.
This parameter may eventually become per-connection. See also <emphasis remap='B'>leftsubnet=</emphasis>
</para>
<para>Note: It seems that T-Mobile in the US and Rogers/Fido in Canada have
started using 25.0.0.0/8 as their pre-NAT range. This range technically belongs
to the Defence Interoperable Network Services Authority (DINSA), an agency of
the Ministry of Defence of the United Kingdom. The network range seems to not
have been announced for decades, which is probably why these organisations
"borrowed" this range. To support roadwarriors on these 3G networks, you might
have to add it to the virtual-private= line.
</para>

  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>myvendorid</emphasis></term>
  <listitem>
<para>The string to use as our vendor id (VID) when send_vendorid=yes. The default is OE-Libreswan-VERSION.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>oe</emphasis></term>
  <listitem>
<para>This option is ignored for now. It used to determine if Opportunistic Encryption will
be enabled. Opportunistic Encryption is the term to describe using IPsec
tunnels without prearrangement. It uses IPSECKEY or TXT records to
announce public RSA keys for certain IP's or identities. However, this feature is going to
be moved outside of the pluto IKE daemon into a separate process, more closely tied with a
local DNS(SEC) server. The default value used to be <emphasis remap='B'>no</emphasis>, so
this should not affect anyone. Contact the developers if you are interested in working on
the re-implementation of OE.
</para>
</listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>nhelpers</emphasis></term>
  <listitem>
<para>how many <emphasis remap='I'>pluto helpers</emphasis> are started
to help with cryptographic operations. Pluto will start
<emphasis remap='I'>(n-1)</emphasis> of them, where <emphasis remap='I'>n</emphasis>
is the number of CPU's you have (including hypherthreaded CPU's).
A value of 0 forces pluto to do all operations in the main
process. A value of -1 tells pluto to perform the above calculation. Any
other value forces the number to that amount.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>secctx-attr-value</emphasis></term>
  <listitem>
<para>
The value for the IPsec SA security context attribute identifier which is
used for Labeled IPsec.  Defaults to the private use IANA value 32001
from the IPsec SA attributes registry. Old openswan versions might
still be using the (stolen) value 10, which has since been assigned by
IANA for something else. Other values are not recommended unless IANA
assigns an actual value for this. See also labeled-ipsec=, loopback=
and policy-label=
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>plutofork</emphasis></term>
  <listitem>
<para>Whether<emphasis remap='I'>pluto</emphasis> will turn into a daemon
by forking in the background, or whether it will remain on the foreground.
Valid options are  <emphasis remap='I'>yes</emphasis> (the default) or
 <emphasis remap='I'>no</emphasis>.
Older init systems, such as sysv initscripts, require that pluto forks
into the background. Newer init systems, such as
 <emphasis remap='I'>systemd</emphasis> or 
<emphasis remap='I'>upstart</emphasis> prefer the process remains in
the foreground. The current default reflects the fact that most systems
are still based on sysv init scripts. Init systems can override this
configuration option by starting pluto specifically with
 <emphasis remap='I'>--nofork</emphasis> specified on the command line to start
the <emphasis remap='I'>pluto</emphasis> daemon <emphasis remap='B'>after</emphasis>
specifying the 
<emphasis remap='I'>--config /etc/ipsec.conf</emphasis> option.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>crlcheckinterval</emphasis></term>
  <listitem>
<para>interval expressed in second units, for example crlcheckinterval=60
for 60 seconds, after which pluto will verify loaded X.509 CRL's for
expiration. If any of the CRL's is expired, or if they previously
failed to get updated, a new attempt at updating the CRL is made. The
first attempt to update a CRL is started at two times the crlcheckinterval.
If set to <emphasis remap='B'>0</emphasis>, which is also the default value 
if this option is not specified, CRL updating is disabled.
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>strictcrlpolicy</emphasis></term>
  <listitem>
<para>if not set, pluto is tolerant about missing or expired X.509 Certificate
Revocation Lists (CRL's), and will allow peer certificates as long as they
do not appear on an expired CRL. When this option is enabled, all connections
with an expired or missing CRL will be denied. Active connections will be
terminated at rekey time. This setup is more secure, but also dangerous. If
the CRL is fetched through an IPsec tunnel with a CRL that expired, the
entire VPN server will be dead in the water until a new CRL is manually
transferred to the machine (if it allows non-IPsec connections).
Acceptable values are <emphasis remap='B'>yes</emphasis> or <emphasis remap='B'>no</emphasis>
(the default).
</para>
  </listitem>
  </varlistentry>

  <varlistentry>
  <term><emphasis remap='B'>forwardcontrol</emphasis></term>
  <listitem>
<para>This option is obsolete and ignored. Please use
<emphasis remap='B'>net.ipv4.ip_forward&nbsp;=&nbsp;0</emphasis>
in <filename>/etc/sysctl.conf</filename> instead to control the
ip forwarding behaviour.
</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>rp_filter</emphasis></term>
  <listitem>
<para>This option is obsolete and ignored. Please use the
<emphasis remap='B'>net.ipv4.conf/[iface]/rp_filter&nbsp;=&nbsp;0</emphasis> options
in <filename>/etc/sysctl.conf</filename> instead. This option is badly
documented; it must be <literal>0</literal> in many cases for ipsec
to function.  </para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>syslog</emphasis></term>
  <listitem>
<para>the
<citerefentry><refentrytitle>syslog</refentrytitle><manvolnum>2</manvolnum></citerefentry>
&ldquo;facility&rdquo; name and priority to use for
startup/shutdown log messages,
default
<emphasis remap='B'>daemon.error</emphasis>.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>klipsdebug</emphasis></term>
  <listitem>
<para>how much KLIPS debugging output should be logged.
An empty value,
or the magic value
<emphasis remap='B'>none</emphasis>,
means no debugging output (the default).
The magic value
<emphasis remap='B'>all</emphasis>
means full output.
Otherwise only the specified types of output
(a quoted list, names separated by white space) are enabled;
for details on available debugging types, see
<citerefentry><refentrytitle>ipsec_klipsdebug</refentrytitle><manvolnum>8</manvolnum></citerefentry>.
This KLIPS option has no effect on NETKEY, Windows or BSD stacks.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>plutodebug</emphasis></term>
  <listitem>
<para>how much Pluto debugging output should be logged.
An empty value,
or the magic value
<emphasis remap='B'>none</emphasis>,
means no debugging output (the default).
The magic value
<emphasis remap='B'>all</emphasis>
means full output.
Otherwise only the specified types of output
(a quoted list, names without the
<option>--debug-</option>
prefix,
separated by white space) are enabled;
for details on available debugging types, see
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>uniqueids</emphasis></term>
  <listitem>
<para>whether a particular participant ID should be kept unique,
with any new (automatically keyed)
connection using an ID from a different IP address
deemed to replace all old ones using that ID.
Acceptable values are <emphasis remap='B'>yes</emphasis>
(the default)
and
<emphasis remap='B'>no</emphasis>.
Participant IDs normally <emphasis remap='I'>are</emphasis> unique,
so a new (automatically-keyed) connection using the same ID is
almost invariably intended to replace an old one.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>plutorestartoncrash</emphasis></term>
  <listitem>
<para>prevent pluto from restarting after it crashed. This option should
only be used by developers when debugging a crasher. It will prevent
overwriting a core file on a new start, or a cascade of core files. This
option is also required if used with plutostderrlog= to avoid clearing
the logs of the crasher. Values can be yes (the default) or no.
</para>
<para>
This option is ignored on modern init systems such as 
<citerefentry><refentrytitle>systemd</refentrytitle><manvolnum>1</manvolnum></citerefentry> and upstart. For
systemd, change the  <emphasis remap='I'>ipsec.service</emphasis> file to contain <emphasis remap='I'>Restart=no</emphasis>. See
<citerefentry><refentrytitle>systemd.service</refentrytitle><manvolnum>5</manvolnum></citerefentry> 
</para>
  </listitem>
  </varlistentry>

  <varlistentry>

  <term><emphasis remap='B'>plutostderrlog</emphasis></term>
  <listitem>
<para>do not use syslog, but rather log to stderr, and direct stderr to the
argument file.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>plutostderrlogtime</emphasis></term>
  <listitem>
<para>Whether pluto logs messages with the current timestamp as prefix. This
might be desired when using <emphasis remap='B'>plutostderrlog=</emphasis>,
which per default does not log timestamps, as the output is used for
the test suite and would have to be filtered out.
Values are
<emphasis remap='B'>no</emphasis>(the default)
or
<emphasis remap='B'>yes</emphasis>
.</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>force-busy</emphasis></term>
  <listitem>
<para>Emulate a <emphasis remap='I'>busy system</emphasis> and take
counter measures. The value can be  <emphasis remap='I'>no</emphasis>
(the default) or  <emphasis remap='I'>yes</emphasis>. If enabled,
pluto will be forced to be "busy". In this state, which happens when
there is a Denial of Service attack,  pluto will use cookies
before accepting new incoming IKE packets. Cookies are send and required
for IKEv1 Aggressive Mode and in IKEv2.  This option is mostly used for
testing purposes, but can be selected by paranoid administrators as
well.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>dumpdir</emphasis></term>
  <listitem>
<para>in what directory should things started by
<emphasis remap='I'>setup</emphasis>
(notably the Pluto daemon) be allowed to
dump core?
The default value is <emphasis remap='I'>/var/run/pluto</emphasis>. When SELinux
runs in enforced mode, changing this requires a similar change in the SELinux policy
for the pluto daemon.
</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>statsbin</emphasis></term>
  <listitem>
<para>This option specifies an optional external program to report tunnel state changes too.
The default is not to report tunnel state changes. This program can be used to notify the
user's desktop  (dbus, NetworkManager) or to report tunnel changes to a central logging server.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>ipsecdir</emphasis></term>
  <listitem>
<para>in what directory the X509, NSS and OE related files should be stored.
The default value is <emphasis remap='I'>/etc/ipsec.d</emphasis>. When SELinux
runs in enforced mode, changing this requires a similar change in the SELinux policy
for the pluto daemon. Note that NSS generated db files contain their location within
their files, so you cannot move this directory without re-creating the NSS files.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>secretsfile</emphasis></term>
  <listitem>
<para>in which file the secret credentials such as preshared keys (PSKs) are stored. See 
<emphasis remap='I'>man ipsec.secrets</emphasis> for the syntax.
The default value is <emphasis remap='I'>/etc/ipsec.secrets</emphasis>.
</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>perpeerlog</emphasis></term>
  <listitem>
<para>if pluto should split the logs in a per-peer directory.
Valid options are <emphasis remap='B'>no</emphasis> and <emphasis remap='B'>yes</emphasis>

When disabled, logging is done to syslog or into a single log file, as defined by
<emphasis remap='B'>plutostderrlog=</emphasis>
</para>

  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>perpeerlogdir</emphasis></term>
  <listitem>
<para>in what directory the per-peer log should be created, if enabled via
the <emphasis remap='B'>perpeerlog</emphasis> option. This will result in 
sub directories in the structure /192/0/2.

The default value is <emphasis remap='I'>/var/log/pluto/peer/</emphasis>. When SELinux
runs in enforced mode, changing this requires a similar change in the SELinux policy
for the pluto daemon.
</para>

</listitem>
</varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>fragicmp</emphasis></term>
  <listitem>
<para>whether a tunnel's need to fragment a packet should be reported
back with an ICMP message,
in an attempt to make the sender lower his PMTU estimate;
acceptable values are
<emphasis remap='B'>no</emphasis>
(the default)
and
<emphasis remap='B'>yes</emphasis>.
This KLIPS option has no effect on NETKEY, Windows or BSD stacks.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>hidetos</emphasis></term>
  <listitem>
<para>whether a tunnel packet's TOS field should be set to
<literal>0</literal>
rather than copied from the user packet inside;
acceptable values are
<emphasis remap='B'>yes</emphasis>
(the default)
and
<emphasis remap='B'>no</emphasis>.  This KLIPS option has no effect
on NETKEY, Windows or BSD stacks.</para>
  </listitem>
  </varlistentry>
  <varlistentry>
  <term><emphasis remap='B'>overridemtu</emphasis></term>
  <listitem>
<para>value that the MTU of the ipsec<emphasis remap='I'>n</emphasis> interface(s) should be set to,
overriding IPsec's (large) default.
This parameter is needed only in special situations.
This KLIPS option has no effect on NETKEY, Windows or BSD stacks.</para>

  </listitem>
  </varlistentry>

</variablelist>
</refsect1>

<refsect1 id='implicit_conns'><title>IMPLICIT CONNS</title>
<para>The system automatically defines several conns to implement
default policy groups.  Each can be overridden by explicitly
defining a new conn with the same name.  If the new conn has <emphasis remap='B'>auto=ignore</emphasis>,
the definition is suppressed.</para>

<para>Here are the automatically supplied definitions.</para>

<!-- .ne 8 -->
<literallayout remap='.nf'>
<!-- .ta 1c -->
<emphasis remap='B'>
conn clear
	type=passthrough
	authby=never
	left=%defaultroute
	right=%group
	auto=route

conn clear-or-private
	type=passthrough
	left=%defaultroute
	leftid=%myid
	right=%opportunisticgroup
	failureshunt=passthrough
	keyingtries=3
	ikelifetime=1h
	salifetime=1h
	rekey=no
	auto=route

conn private-or-clear
	type=tunnel
	left=%defaultroute
	leftid=%myid
	right=%opportunisticgroup
	failureshunt=passthrough
	keyingtries=3
	ikelifetime=1h
	salifetime=1h
	rekey=no
	auto=route

conn private
	type=tunnel
	left=%defaultroute
	leftid=%myid
	right=%opportunisticgroup
	failureshunt=drop
	keyingtries=3
	ikelifetime=1h
	salifetime=1h
	rekey=no
	auto=route

conn block
	type=reject
	authby=never
	left=%defaultroute
	right=%group
	auto=route

# default policy
conn packetdefault
	type=tunnel
	left=%defaultroute
	leftid=%myid
	left=0.0.0.0/0
	right=%opportunistic
	failureshunt=passthrough
	keyingtries=3
	ikelifetime=1h
	salifetime=1h
	rekey=no
	auto=route
</emphasis>
</literallayout> <!-- .fi -->

<para>These conns are <emphasis remap='I'>not</emphasis> affected by anything in <emphasis remap='B'>conn %default</emphasis>.
They will only work if <emphasis remap='B'>%defaultroute</emphasis> works.
The <emphasis remap='B'>leftid</emphasis> will be the interfaces IP address; this
requires that reverse DNS records be set up properly.</para>

<para>The implicit conns are defined after all others.  It is
appropriate and reasonable to use <emphasis remap='B'>also=private-or-clear</emphasis>
(for example) in any other opportunistic conn.</para>
</refsect1>

<refsect1 id='policy_group_files'><title>POLICY GROUP FILES</title>
<para>The optional files under 
<filename>/etc/ipsec.d/policy</filename>,
including</para>
<literallayout remap='.nf'>

/etc/ipsec.d/policies/clear
/etc/ipsec.d/policies/clear-or-private
/etc/ipsec.d/policies/private-or-clear
/etc/ipsec.d/policies/private
/etc/ipsec.d/policies/block

</literallayout> <!-- .fi -->
<para>may contain policy group configuration information to 
supplement 
<emphasis remap='I'>ipsec.conf</emphasis>.
Their contents are not security-sensitive.</para>

<para>These files are text files.
Each consists of a list of CIDR blocks, one per line.
White space followed by # followed by anything to the end of the line
is a comment and is ignored, as are empty lines.</para>

<para>A connection in
<filename>ipsec.conf</filename>
which has
<emphasis remap='B'>right=%group</emphasis>
or 
<emphasis remap='B'>right=%opportunisticgroup</emphasis>
is a policy group connection.
When a policy group file of the same name is loaded, with</para>

<para>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<emphasis remap='B'>ipsec auto --rereadgroups</emphasis></para> 

<para>or at system start, the connection is instantiated such that each
CIDR block serves as an instance's 
<emphasis remap='B'>right</emphasis>
value. The system treats the
resulting instances as normal connections.</para>

<para>For example, given a suitable connection definition 
<emphasis remap='B'>private</emphasis>,
and the file
<filename>/etc/ipsec.d/policy/private</filename>
with an entry 192.0.2.3,
the system creates a connection instance 
<emphasis remap='B'>private#192.0.2.3.</emphasis>
This connection inherits all details from 
<emphasis remap='B'>private</emphasis>,
except that its right client is 192.0.2.3.</para>
</refsect1>

<refsect1 id='default_policy_groups'><title>DEFAULT POLICY GROUPS</title>
<para>The standard Libreswan install includes several policy groups
which provide a way of classifying possible peers into IPsec security classes:
<emphasis remap='B'>private</emphasis>
(talk encrypted only),
<emphasis remap='B'>private-or-clear</emphasis>
(prefer encryption),
<emphasis remap='B'>clear-or-private</emphasis>
(respond to requests for encryption), 
<emphasis remap='B'>clear</emphasis>
and
<emphasis remap='B'>block</emphasis>.
Implicit policy groups apply to the local host only,
and are implemented by the
<emphasis remap='B'>IMPLICIT CONNECTIONS</emphasis>
described above.</para>
</refsect1>

<refsect1 id='obsolete'><title>OBSOLETE</title>
<para>Various options have recently been obsoleted and are ignored. The
options
<emphasis remap='B'>prepluto=</emphasis> and
<emphasis remap='B'>plutopost=</emphasis> have been obsoleted because
these were used by the (obsoleted) shell wrappers launching the pluto daemon. If
this functionality is needed, look at your initsystem for support. For example,
the <emphasis remap='B'>systemd</emphasis> initsystem has the options 
<emphasis remap='B'>ExecStartPre=</emphasis> and <emphasis remap='B'>ExecStopPost=</emphasis>
to accomplish the same. The option <emphasis remap='B'>plutoopts=</emphasis> has
also been obsoleted for this reason. A replacement can be found in the 
<emphasis remap='B'>PLUTO_OPTS</emphasis> environment variable in the file 
<emphasis remap='B'>/etc/sysconfig/pluto</emphasis> (Fedora/RHEL) or 
<emphasis remap='B'>/etc/defaults/pluto</emphasis> (Debian/Ubuntu). The last two
options obsoleted by the removal of the old shell scripts are
<emphasis remap='B'>pluto=</emphasis> and
<emphasis remap='B'>plutowait=</emphasis>.
</para>
<para> The following ipsec commands have been obsoleted:

<emphasis remap='B'>ipsec _confread</emphasis>,
<emphasis remap='B'>ipsec _include</emphasis>,
<emphasis remap='B'>ipsec _plutoload</emphasis>,
<emphasis remap='B'>ipsec _realsetup</emphasis>,
<emphasis remap='B'>ipsec _startklips</emphasis> and
<emphasis remap='B'>ipsec _startnetkey</emphasis> due to the new parsing and startup methods and

<emphasis remap='B'>ipsec copyright</emphasis>,
<emphasis remap='B'>ipsec lwdnsq</emphasis>,
<emphasis remap='B'>ipsec mailkey</emphasis>,
<emphasis remap='B'>ipsec policy</emphasis>,
<emphasis remap='B'>ipsec showdefaults</emphasis> and
<emphasis remap='B'>ipsec showpolicy</emphasis> because they were no longer needed or current.
</para>

</refsect1>

<refsect1 id='choosing_a_connection'><title>CHOOSING A CONNECTION [THIS SECTION IS EXTREMELY OUT OF DATE</title>
<para>When choosing a connection to apply to an outbound packet caught with a 
<emphasis remap='B'>%trap,</emphasis>
the system prefers the one with the most specific eroute that
includes the packet's source and destination IP addresses.
Source subnets are examined before destination subnets.
For initiating, only routed connections are considered. For responding,
unrouted but added connections are considered.</para>

<para>When choosing a connection to use to respond to a negotiation which
doesn't match an ordinary conn, an opportunistic connection
may be instantiated. Eventually, its instance will be /32 -&gt; /32, but
for earlier stages of the negotiation, there will not be enough
information about the client subnets to complete the instantiation.</para>
</refsect1>

<refsect1 id='files'><title>FILES</title>
<literallayout remap='.nf'>
/etc/ipsec.conf
/etc/ipsec.d/policies/clear
/etc/ipsec.d/policies/clear-or-private
/etc/ipsec.d/policies/private-or-clear
/etc/ipsec.d/policies/private
/etc/ipsec.d/policies/block
</literallayout> <!-- .fi -->
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para><citerefentry><refentrytitle>ipsec</refentrytitle><manvolnum>8</manvolnum></citerefentry>, <citerefentry><refentrytitle>ipsec_ttoaddr</refentrytitle><manvolnum>8</manvolnum></citerefentry>, <citerefentry><refentrytitle>ipsec_auto</refentrytitle><manvolnum>8</manvolnum></citerefentry>, <citerefentry><refentrytitle>ipsec_rsasigkey</refentrytitle><manvolnum>8</manvolnum></citerefentry></para>
</refsect1>

<refsect1 id='history'><title>HISTORY</title>
<para>Designed for the FreeS/WAN project
&lt;<ulink url='http://www.freeswan.org'>http://www.freeswan.org</ulink>&gt;
by Henry Spencer.</para>
</refsect1>

<refsect1 id='bugs'><title>BUGS</title>
<para>Before reporting new bugs, please ensure you are using the latest
version of Libreswan, and if not using KLIPS, please ensure you are using
the latest kernel code for your IPsec stack.</para>

<para>When
<emphasis remap='B'>type</emphasis>
or 
<emphasis remap='B'>failureshunt</emphasis>
is set to
<emphasis remap='B'>drop</emphasis>
or
<emphasis remap='B'>reject,</emphasis>
Libreswan blocks outbound packets using eroutes, but assumes inbound
blocking is handled by the firewall. Libreswan offers firewall hooks 
via an &ldquo;updown&rdquo; script.  However, the default 
<emphasis remap='B'>ipsec _updown</emphasis>
provides no help in controlling a modern firewall.</para>

<para>Including attributes of the keying channel (authentication methods,
<emphasis remap='B'>ikelifetime</emphasis>, etc.) as an attribute of a
connection, rather than of a participant pair, is dubious and incurs
limitations.</para>

<para>The use of <emphasis remap='B'>%any</emphasis> with the
<emphasis remap='I'>protoport=</emphasis> option is ambiguous. Should
the SA permits any port through or should the SA negotiate any single
port through?  The first is a basic conn with a wildcard. The second
is a template. The second is the current behaviour, and it's wrong
for quite a number of uses involving TCP. The keyword
<emphasis remap='B'>%one</emphasis> may be introduced in the future to
separate these two cases.</para>

<para>It would be good to have a line-continuation syntax,
especially for the very long lines involved in
RSA signature keys.</para>

<para><emphasis remap='B'>First packet caching</emphasis> is only implemented
for the KLIPS(NG) and MAST stacks. NETKEY returns POSIX-breaking responses,
visible as <emphasis remap='I'>connect: Resource temporarily unavailable</emphasis>
errors. This affects Opportunistic Encryption and DPD. Functionality on the BSD
and Windows stacks is unknown.</para>

<para>Some state information is only available when using KLIPS, and will
return errors on other IPsec stacks. These include 
<emphasis remap='I'>ipsec eroute</emphasis>, 
<emphasis remap='I'>ipsec spi</emphasis> and
<emphasis remap='I'>ipsec look</emphasis>.</para>

<para> Multiple L2TP clients behind the same NAT router, and multiple L2TP
clients behind different NAT routers using the same Virtual IP is currently
only working for the KLIPSNG stack.</para>

<para>The ability to specify different identities,
<emphasis remap='B'>authby</emphasis>,
and public keys for different automatic-keyed connections
between the same participants is misleading;
this doesn't work dependably because the identity of the participants
is not known early enough.
This is especially awkward for the &ldquo;Road Warrior&rdquo; case,
where the remote IP address is specified as
<literal>0.0.0.0</literal>,
and that is considered to be the &ldquo;participant&rdquo; for such connections.</para>

<para>In principle it might be necessary to control MTU on an
interface-by-interface basis,
rather than with the single global override that
<emphasis remap='B'>overridemtu</emphasis>
provides. This feature is planned for a future release.</para>

<para>If conns are to be added before DNS is available,
<emphasis remap='B'>left=</emphasis><emphasis remap='I'>FQDN</emphasis>,
<emphasis remap='B'>leftnextop=</emphasis><emphasis remap='I'>FQDN</emphasis>,
and
<emphasis remap='B'>leftrsasigkey=%dnsonload</emphasis>
will fail.
<citerefentry><refentrytitle>ipsec_pluto</refentrytitle><manvolnum>8</manvolnum></citerefentry>
does not actually use the public key for our side of a conn but it
isn't generally known at a add-time which side is ours (Road Warrior
and Opportunistic conns are currently exceptions).</para>

<para>The <emphasis remap='B'>myid</emphasis> option does not affect explicit <emphasis remap='B'> ipsec auto --add</emphasis> or <emphasis remap='B'>ipsec auto --replace</emphasis> commands for implicit conns.</para>
</refsect1>
</refentry>

